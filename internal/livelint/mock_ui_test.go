// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package livelint_test

import (
	"github.com/bespinian/livelint/internal/livelint"
	"sync"
)

// Ensure, that UserInteractionMock does implement livelint.UserInteraction.
// If this is not the case, regenerate this file with moq.
var _ livelint.UserInteraction = &UserInteractionMock{}

// UserInteractionMock is a mock implementation of livelint.UserInteraction.
//
//	func TestSomethingThatUsesUserInteraction(t *testing.T) {
//
//		// make and configure a mocked livelint.UserInteraction
//		mockedUserInteraction := &UserInteractionMock{
//			AskYesNoFunc: func(question string) bool {
//				panic("mock out the AskYesNo method")
//			},
//			DisplayCheckCompletionFunc: func(completionMsg string, kind livelint.SummaryType)  {
//				panic("mock out the DisplayCheckCompletion method")
//			},
//			DisplayCheckResultFunc: func(checkResult livelint.CheckResult)  {
//				panic("mock out the DisplayCheckResult method")
//			},
//			DisplayCheckStartFunc: func(checkMsg string)  {
//				panic("mock out the DisplayCheckStart method")
//			},
//			DisplayContextFunc: func(contextMsg string)  {
//				panic("mock out the DisplayContext method")
//			},
//			StartSpinnerFunc: func()  {
//				panic("mock out the StartSpinner method")
//			},
//			StopSpinnerFunc: func()  {
//				panic("mock out the StopSpinner method")
//			},
//		}
//
//		// use mockedUserInteraction in code that requires livelint.UserInteraction
//		// and then make assertions.
//
//	}
type UserInteractionMock struct {
	// AskYesNoFunc mocks the AskYesNo method.
	AskYesNoFunc func(question string) bool

	// DisplayCheckCompletionFunc mocks the DisplayCheckCompletion method.
	DisplayCheckCompletionFunc func(completionMsg string, kind livelint.SummaryType)

	// DisplayCheckResultFunc mocks the DisplayCheckResult method.
	DisplayCheckResultFunc func(checkResult livelint.CheckResult)

	// DisplayCheckStartFunc mocks the DisplayCheckStart method.
	DisplayCheckStartFunc func(checkMsg string)

	// DisplayContextFunc mocks the DisplayContext method.
	DisplayContextFunc func(contextMsg string)

	// StartSpinnerFunc mocks the StartSpinner method.
	StartSpinnerFunc func()

	// StopSpinnerFunc mocks the StopSpinner method.
	StopSpinnerFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// AskYesNo holds details about calls to the AskYesNo method.
		AskYesNo []struct {
			// Question is the question argument value.
			Question string
		}
		// DisplayCheckCompletion holds details about calls to the DisplayCheckCompletion method.
		DisplayCheckCompletion []struct {
			// CompletionMsg is the completionMsg argument value.
			CompletionMsg string
			// Kind is the kind argument value.
			Kind livelint.SummaryType
		}
		// DisplayCheckResult holds details about calls to the DisplayCheckResult method.
		DisplayCheckResult []struct {
			// CheckResult is the checkResult argument value.
			CheckResult livelint.CheckResult
		}
		// DisplayCheckStart holds details about calls to the DisplayCheckStart method.
		DisplayCheckStart []struct {
			// CheckMsg is the checkMsg argument value.
			CheckMsg string
		}
		// DisplayContext holds details about calls to the DisplayContext method.
		DisplayContext []struct {
			// ContextMsg is the contextMsg argument value.
			ContextMsg string
		}
		// StartSpinner holds details about calls to the StartSpinner method.
		StartSpinner []struct {
		}
		// StopSpinner holds details about calls to the StopSpinner method.
		StopSpinner []struct {
		}
	}
	lockAskYesNo               sync.RWMutex
	lockDisplayCheckCompletion sync.RWMutex
	lockDisplayCheckResult     sync.RWMutex
	lockDisplayCheckStart      sync.RWMutex
	lockDisplayContext         sync.RWMutex
	lockStartSpinner           sync.RWMutex
	lockStopSpinner            sync.RWMutex
}

// AskYesNo calls AskYesNoFunc.
func (mock *UserInteractionMock) AskYesNo(question string) bool {
	if mock.AskYesNoFunc == nil {
		panic("UserInteractionMock.AskYesNoFunc: method is nil but UserInteraction.AskYesNo was just called")
	}
	callInfo := struct {
		Question string
	}{
		Question: question,
	}
	mock.lockAskYesNo.Lock()
	mock.calls.AskYesNo = append(mock.calls.AskYesNo, callInfo)
	mock.lockAskYesNo.Unlock()
	return mock.AskYesNoFunc(question)
}

// AskYesNoCalls gets all the calls that were made to AskYesNo.
// Check the length with:
//
//	len(mockedUserInteraction.AskYesNoCalls())
func (mock *UserInteractionMock) AskYesNoCalls() []struct {
	Question string
} {
	var calls []struct {
		Question string
	}
	mock.lockAskYesNo.RLock()
	calls = mock.calls.AskYesNo
	mock.lockAskYesNo.RUnlock()
	return calls
}

// DisplayCheckCompletion calls DisplayCheckCompletionFunc.
func (mock *UserInteractionMock) DisplayCheckCompletion(completionMsg string, kind livelint.SummaryType) {
	if mock.DisplayCheckCompletionFunc == nil {
		panic("UserInteractionMock.DisplayCheckCompletionFunc: method is nil but UserInteraction.DisplayCheckCompletion was just called")
	}
	callInfo := struct {
		CompletionMsg string
		Kind          livelint.SummaryType
	}{
		CompletionMsg: completionMsg,
		Kind:          kind,
	}
	mock.lockDisplayCheckCompletion.Lock()
	mock.calls.DisplayCheckCompletion = append(mock.calls.DisplayCheckCompletion, callInfo)
	mock.lockDisplayCheckCompletion.Unlock()
	mock.DisplayCheckCompletionFunc(completionMsg, kind)
}

// DisplayCheckCompletionCalls gets all the calls that were made to DisplayCheckCompletion.
// Check the length with:
//
//	len(mockedUserInteraction.DisplayCheckCompletionCalls())
func (mock *UserInteractionMock) DisplayCheckCompletionCalls() []struct {
	CompletionMsg string
	Kind          livelint.SummaryType
} {
	var calls []struct {
		CompletionMsg string
		Kind          livelint.SummaryType
	}
	mock.lockDisplayCheckCompletion.RLock()
	calls = mock.calls.DisplayCheckCompletion
	mock.lockDisplayCheckCompletion.RUnlock()
	return calls
}

// DisplayCheckResult calls DisplayCheckResultFunc.
func (mock *UserInteractionMock) DisplayCheckResult(checkResult livelint.CheckResult) {
	if mock.DisplayCheckResultFunc == nil {
		panic("UserInteractionMock.DisplayCheckResultFunc: method is nil but UserInteraction.DisplayCheckResult was just called")
	}
	callInfo := struct {
		CheckResult livelint.CheckResult
	}{
		CheckResult: checkResult,
	}
	mock.lockDisplayCheckResult.Lock()
	mock.calls.DisplayCheckResult = append(mock.calls.DisplayCheckResult, callInfo)
	mock.lockDisplayCheckResult.Unlock()
	mock.DisplayCheckResultFunc(checkResult)
}

// DisplayCheckResultCalls gets all the calls that were made to DisplayCheckResult.
// Check the length with:
//
//	len(mockedUserInteraction.DisplayCheckResultCalls())
func (mock *UserInteractionMock) DisplayCheckResultCalls() []struct {
	CheckResult livelint.CheckResult
} {
	var calls []struct {
		CheckResult livelint.CheckResult
	}
	mock.lockDisplayCheckResult.RLock()
	calls = mock.calls.DisplayCheckResult
	mock.lockDisplayCheckResult.RUnlock()
	return calls
}

// DisplayCheckStart calls DisplayCheckStartFunc.
func (mock *UserInteractionMock) DisplayCheckStart(checkMsg string) {
	if mock.DisplayCheckStartFunc == nil {
		panic("UserInteractionMock.DisplayCheckStartFunc: method is nil but UserInteraction.DisplayCheckStart was just called")
	}
	callInfo := struct {
		CheckMsg string
	}{
		CheckMsg: checkMsg,
	}
	mock.lockDisplayCheckStart.Lock()
	mock.calls.DisplayCheckStart = append(mock.calls.DisplayCheckStart, callInfo)
	mock.lockDisplayCheckStart.Unlock()
	mock.DisplayCheckStartFunc(checkMsg)
}

// DisplayCheckStartCalls gets all the calls that were made to DisplayCheckStart.
// Check the length with:
//
//	len(mockedUserInteraction.DisplayCheckStartCalls())
func (mock *UserInteractionMock) DisplayCheckStartCalls() []struct {
	CheckMsg string
} {
	var calls []struct {
		CheckMsg string
	}
	mock.lockDisplayCheckStart.RLock()
	calls = mock.calls.DisplayCheckStart
	mock.lockDisplayCheckStart.RUnlock()
	return calls
}

// DisplayContext calls DisplayContextFunc.
func (mock *UserInteractionMock) DisplayContext(contextMsg string) {
	if mock.DisplayContextFunc == nil {
		panic("UserInteractionMock.DisplayContextFunc: method is nil but UserInteraction.DisplayContext was just called")
	}
	callInfo := struct {
		ContextMsg string
	}{
		ContextMsg: contextMsg,
	}
	mock.lockDisplayContext.Lock()
	mock.calls.DisplayContext = append(mock.calls.DisplayContext, callInfo)
	mock.lockDisplayContext.Unlock()
	mock.DisplayContextFunc(contextMsg)
}

// DisplayContextCalls gets all the calls that were made to DisplayContext.
// Check the length with:
//
//	len(mockedUserInteraction.DisplayContextCalls())
func (mock *UserInteractionMock) DisplayContextCalls() []struct {
	ContextMsg string
} {
	var calls []struct {
		ContextMsg string
	}
	mock.lockDisplayContext.RLock()
	calls = mock.calls.DisplayContext
	mock.lockDisplayContext.RUnlock()
	return calls
}

// StartSpinner calls StartSpinnerFunc.
func (mock *UserInteractionMock) StartSpinner() {
	if mock.StartSpinnerFunc == nil {
		panic("UserInteractionMock.StartSpinnerFunc: method is nil but UserInteraction.StartSpinner was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStartSpinner.Lock()
	mock.calls.StartSpinner = append(mock.calls.StartSpinner, callInfo)
	mock.lockStartSpinner.Unlock()
	mock.StartSpinnerFunc()
}

// StartSpinnerCalls gets all the calls that were made to StartSpinner.
// Check the length with:
//
//	len(mockedUserInteraction.StartSpinnerCalls())
func (mock *UserInteractionMock) StartSpinnerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStartSpinner.RLock()
	calls = mock.calls.StartSpinner
	mock.lockStartSpinner.RUnlock()
	return calls
}

// StopSpinner calls StopSpinnerFunc.
func (mock *UserInteractionMock) StopSpinner() {
	if mock.StopSpinnerFunc == nil {
		panic("UserInteractionMock.StopSpinnerFunc: method is nil but UserInteraction.StopSpinner was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStopSpinner.Lock()
	mock.calls.StopSpinner = append(mock.calls.StopSpinner, callInfo)
	mock.lockStopSpinner.Unlock()
	mock.StopSpinnerFunc()
}

// StopSpinnerCalls gets all the calls that were made to StopSpinner.
// Check the length with:
//
//	len(mockedUserInteraction.StopSpinnerCalls())
func (mock *UserInteractionMock) StopSpinnerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStopSpinner.RLock()
	calls = mock.calls.StopSpinner
	mock.lockStopSpinner.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package livelint

import (
	"k8s.io/client-go/kubernetes/typed/networking/v1"
	rest "k8s.io/client-go/rest"
	"sync"
)

// Ensure, that networkingV1InterfaceMock does implement v1.NetworkingV1Interface.
// If this is not the case, regenerate this file with moq.
var _ v1.NetworkingV1Interface = &networkingV1InterfaceMock{}

// networkingV1InterfaceMock is a mock implementation of v1.NetworkingV1Interface.
//
//	func TestSomethingThatUsesNetworkingV1Interface(t *testing.T) {
//
//		// make and configure a mocked v1.NetworkingV1Interface
//		mockedNetworkingV1Interface := &networkingV1InterfaceMock{
//			IngressClassesFunc: func() v1.IngressClassInterface {
//				panic("mock out the IngressClasses method")
//			},
//			IngressesFunc: func(namespace string) v1.IngressInterface {
//				panic("mock out the Ingresses method")
//			},
//			NetworkPoliciesFunc: func(namespace string) v1.NetworkPolicyInterface {
//				panic("mock out the NetworkPolicies method")
//			},
//			RESTClientFunc: func() rest.Interface {
//				panic("mock out the RESTClient method")
//			},
//		}
//
//		// use mockedNetworkingV1Interface in code that requires v1.NetworkingV1Interface
//		// and then make assertions.
//
//	}
type networkingV1InterfaceMock struct {
	// IngressClassesFunc mocks the IngressClasses method.
	IngressClassesFunc func() v1.IngressClassInterface

	// IngressesFunc mocks the Ingresses method.
	IngressesFunc func(namespace string) v1.IngressInterface

	// NetworkPoliciesFunc mocks the NetworkPolicies method.
	NetworkPoliciesFunc func(namespace string) v1.NetworkPolicyInterface

	// RESTClientFunc mocks the RESTClient method.
	RESTClientFunc func() rest.Interface

	// calls tracks calls to the methods.
	calls struct {
		// IngressClasses holds details about calls to the IngressClasses method.
		IngressClasses []struct {
		}
		// Ingresses holds details about calls to the Ingresses method.
		Ingresses []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// NetworkPolicies holds details about calls to the NetworkPolicies method.
		NetworkPolicies []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// RESTClient holds details about calls to the RESTClient method.
		RESTClient []struct {
		}
	}
	lockIngressClasses  sync.RWMutex
	lockIngresses       sync.RWMutex
	lockNetworkPolicies sync.RWMutex
	lockRESTClient      sync.RWMutex
}

// IngressClasses calls IngressClassesFunc.
func (mock *networkingV1InterfaceMock) IngressClasses() v1.IngressClassInterface {
	if mock.IngressClassesFunc == nil {
		panic("networkingV1InterfaceMock.IngressClassesFunc: method is nil but NetworkingV1Interface.IngressClasses was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIngressClasses.Lock()
	mock.calls.IngressClasses = append(mock.calls.IngressClasses, callInfo)
	mock.lockIngressClasses.Unlock()
	return mock.IngressClassesFunc()
}

// IngressClassesCalls gets all the calls that were made to IngressClasses.
// Check the length with:
//
//	len(mockedNetworkingV1Interface.IngressClassesCalls())
func (mock *networkingV1InterfaceMock) IngressClassesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIngressClasses.RLock()
	calls = mock.calls.IngressClasses
	mock.lockIngressClasses.RUnlock()
	return calls
}

// Ingresses calls IngressesFunc.
func (mock *networkingV1InterfaceMock) Ingresses(namespace string) v1.IngressInterface {
	if mock.IngressesFunc == nil {
		panic("networkingV1InterfaceMock.IngressesFunc: method is nil but NetworkingV1Interface.Ingresses was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockIngresses.Lock()
	mock.calls.Ingresses = append(mock.calls.Ingresses, callInfo)
	mock.lockIngresses.Unlock()
	return mock.IngressesFunc(namespace)
}

// IngressesCalls gets all the calls that were made to Ingresses.
// Check the length with:
//
//	len(mockedNetworkingV1Interface.IngressesCalls())
func (mock *networkingV1InterfaceMock) IngressesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockIngresses.RLock()
	calls = mock.calls.Ingresses
	mock.lockIngresses.RUnlock()
	return calls
}

// NetworkPolicies calls NetworkPoliciesFunc.
func (mock *networkingV1InterfaceMock) NetworkPolicies(namespace string) v1.NetworkPolicyInterface {
	if mock.NetworkPoliciesFunc == nil {
		panic("networkingV1InterfaceMock.NetworkPoliciesFunc: method is nil but NetworkingV1Interface.NetworkPolicies was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockNetworkPolicies.Lock()
	mock.calls.NetworkPolicies = append(mock.calls.NetworkPolicies, callInfo)
	mock.lockNetworkPolicies.Unlock()
	return mock.NetworkPoliciesFunc(namespace)
}

// NetworkPoliciesCalls gets all the calls that were made to NetworkPolicies.
// Check the length with:
//
//	len(mockedNetworkingV1Interface.NetworkPoliciesCalls())
func (mock *networkingV1InterfaceMock) NetworkPoliciesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockNetworkPolicies.RLock()
	calls = mock.calls.NetworkPolicies
	mock.lockNetworkPolicies.RUnlock()
	return calls
}

// RESTClient calls RESTClientFunc.
func (mock *networkingV1InterfaceMock) RESTClient() rest.Interface {
	if mock.RESTClientFunc == nil {
		panic("networkingV1InterfaceMock.RESTClientFunc: method is nil but NetworkingV1Interface.RESTClient was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRESTClient.Lock()
	mock.calls.RESTClient = append(mock.calls.RESTClient, callInfo)
	mock.lockRESTClient.Unlock()
	return mock.RESTClientFunc()
}

// RESTClientCalls gets all the calls that were made to RESTClient.
// Check the length with:
//
//	len(mockedNetworkingV1Interface.RESTClientCalls())
func (mock *networkingV1InterfaceMock) RESTClientCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRESTClient.RLock()
	calls = mock.calls.RESTClient
	mock.lockRESTClient.RUnlock()
	return calls
}

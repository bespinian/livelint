// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package livelint_test

import (
	"context"
	"github.com/bespinian/livelint/internal/livelint"
	netv1 "k8s.io/api/networking/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/applyconfigurations/networking/v1"
	"sync"
)

// Ensure, that IngressInterfaceMock does implement livelint.IngressInterface.
// If this is not the case, regenerate this file with moq.
var _ livelint.IngressInterface = &IngressInterfaceMock{}

// IngressInterfaceMock is a mock implementation of livelint.IngressInterface.
//
//	func TestSomethingThatUsesIngressInterface(t *testing.T) {
//
//		// make and configure a mocked livelint.IngressInterface
//		mockedIngressInterface := &IngressInterfaceMock{
//			ApplyFunc: func(ctx context.Context, ingress *v1.IngressApplyConfiguration, opts metav1.ApplyOptions) (*netv1.Ingress, error) {
//				panic("mock out the Apply method")
//			},
//			ApplyStatusFunc: func(ctx context.Context, ingress *v1.IngressApplyConfiguration, opts metav1.ApplyOptions) (*netv1.Ingress, error) {
//				panic("mock out the ApplyStatus method")
//			},
//			CreateFunc: func(ctx context.Context, ingress *netv1.Ingress, opts metav1.CreateOptions) (*netv1.Ingress, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, name string, opts metav1.DeleteOptions) error {
//				panic("mock out the Delete method")
//			},
//			DeleteCollectionFunc: func(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
//				panic("mock out the DeleteCollection method")
//			},
//			GetFunc: func(ctx context.Context, name string, opts metav1.GetOptions) (*netv1.Ingress, error) {
//				panic("mock out the Get method")
//			},
//			ListFunc: func(ctx context.Context, opts metav1.ListOptions) (*netv1.IngressList, error) {
//				panic("mock out the List method")
//			},
//			PatchFunc: func(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*netv1.Ingress, error) {
//				panic("mock out the Patch method")
//			},
//			UpdateFunc: func(ctx context.Context, ingress *netv1.Ingress, opts metav1.UpdateOptions) (*netv1.Ingress, error) {
//				panic("mock out the Update method")
//			},
//			UpdateStatusFunc: func(ctx context.Context, ingress *netv1.Ingress, opts metav1.UpdateOptions) (*netv1.Ingress, error) {
//				panic("mock out the UpdateStatus method")
//			},
//			WatchFunc: func(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
//				panic("mock out the Watch method")
//			},
//		}
//
//		// use mockedIngressInterface in code that requires livelint.IngressInterface
//		// and then make assertions.
//
//	}
type IngressInterfaceMock struct {
	// ApplyFunc mocks the Apply method.
	ApplyFunc func(ctx context.Context, ingress *v1.IngressApplyConfiguration, opts metav1.ApplyOptions) (*netv1.Ingress, error)

	// ApplyStatusFunc mocks the ApplyStatus method.
	ApplyStatusFunc func(ctx context.Context, ingress *v1.IngressApplyConfiguration, opts metav1.ApplyOptions) (*netv1.Ingress, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, ingress *netv1.Ingress, opts metav1.CreateOptions) (*netv1.Ingress, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, name string, opts metav1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, name string, opts metav1.GetOptions) (*netv1.Ingress, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, opts metav1.ListOptions) (*netv1.IngressList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*netv1.Ingress, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, ingress *netv1.Ingress, opts metav1.UpdateOptions) (*netv1.Ingress, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(ctx context.Context, ingress *netv1.Ingress, opts metav1.UpdateOptions) (*netv1.Ingress, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Apply holds details about calls to the Apply method.
		Apply []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ingress is the ingress argument value.
			Ingress *v1.IngressApplyConfiguration
			// Opts is the opts argument value.
			Opts metav1.ApplyOptions
		}
		// ApplyStatus holds details about calls to the ApplyStatus method.
		ApplyStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ingress is the ingress argument value.
			Ingress *v1.IngressApplyConfiguration
			// Opts is the opts argument value.
			Opts metav1.ApplyOptions
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ingress is the ingress argument value.
			Ingress *netv1.Ingress
			// Opts is the opts argument value.
			Opts metav1.CreateOptions
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts metav1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts metav1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts metav1.ListOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts metav1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Opts is the opts argument value.
			Opts metav1.PatchOptions
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ingress is the ingress argument value.
			Ingress *netv1.Ingress
			// Opts is the opts argument value.
			Opts metav1.UpdateOptions
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ingress is the ingress argument value.
			Ingress *netv1.Ingress
			// Opts is the opts argument value.
			Opts metav1.UpdateOptions
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
	}
	lockApply            sync.RWMutex
	lockApplyStatus      sync.RWMutex
	lockCreate           sync.RWMutex
	lockDelete           sync.RWMutex
	lockDeleteCollection sync.RWMutex
	lockGet              sync.RWMutex
	lockList             sync.RWMutex
	lockPatch            sync.RWMutex
	lockUpdate           sync.RWMutex
	lockUpdateStatus     sync.RWMutex
	lockWatch            sync.RWMutex
}

// Apply calls ApplyFunc.
func (mock *IngressInterfaceMock) Apply(ctx context.Context, ingress *v1.IngressApplyConfiguration, opts metav1.ApplyOptions) (*netv1.Ingress, error) {
	if mock.ApplyFunc == nil {
		panic("IngressInterfaceMock.ApplyFunc: method is nil but IngressInterface.Apply was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Ingress *v1.IngressApplyConfiguration
		Opts    metav1.ApplyOptions
	}{
		Ctx:     ctx,
		Ingress: ingress,
		Opts:    opts,
	}
	mock.lockApply.Lock()
	mock.calls.Apply = append(mock.calls.Apply, callInfo)
	mock.lockApply.Unlock()
	return mock.ApplyFunc(ctx, ingress, opts)
}

// ApplyCalls gets all the calls that were made to Apply.
// Check the length with:
//
//	len(mockedIngressInterface.ApplyCalls())
func (mock *IngressInterfaceMock) ApplyCalls() []struct {
	Ctx     context.Context
	Ingress *v1.IngressApplyConfiguration
	Opts    metav1.ApplyOptions
} {
	var calls []struct {
		Ctx     context.Context
		Ingress *v1.IngressApplyConfiguration
		Opts    metav1.ApplyOptions
	}
	mock.lockApply.RLock()
	calls = mock.calls.Apply
	mock.lockApply.RUnlock()
	return calls
}

// ApplyStatus calls ApplyStatusFunc.
func (mock *IngressInterfaceMock) ApplyStatus(ctx context.Context, ingress *v1.IngressApplyConfiguration, opts metav1.ApplyOptions) (*netv1.Ingress, error) {
	if mock.ApplyStatusFunc == nil {
		panic("IngressInterfaceMock.ApplyStatusFunc: method is nil but IngressInterface.ApplyStatus was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Ingress *v1.IngressApplyConfiguration
		Opts    metav1.ApplyOptions
	}{
		Ctx:     ctx,
		Ingress: ingress,
		Opts:    opts,
	}
	mock.lockApplyStatus.Lock()
	mock.calls.ApplyStatus = append(mock.calls.ApplyStatus, callInfo)
	mock.lockApplyStatus.Unlock()
	return mock.ApplyStatusFunc(ctx, ingress, opts)
}

// ApplyStatusCalls gets all the calls that were made to ApplyStatus.
// Check the length with:
//
//	len(mockedIngressInterface.ApplyStatusCalls())
func (mock *IngressInterfaceMock) ApplyStatusCalls() []struct {
	Ctx     context.Context
	Ingress *v1.IngressApplyConfiguration
	Opts    metav1.ApplyOptions
} {
	var calls []struct {
		Ctx     context.Context
		Ingress *v1.IngressApplyConfiguration
		Opts    metav1.ApplyOptions
	}
	mock.lockApplyStatus.RLock()
	calls = mock.calls.ApplyStatus
	mock.lockApplyStatus.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *IngressInterfaceMock) Create(ctx context.Context, ingress *netv1.Ingress, opts metav1.CreateOptions) (*netv1.Ingress, error) {
	if mock.CreateFunc == nil {
		panic("IngressInterfaceMock.CreateFunc: method is nil but IngressInterface.Create was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Ingress *netv1.Ingress
		Opts    metav1.CreateOptions
	}{
		Ctx:     ctx,
		Ingress: ingress,
		Opts:    opts,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, ingress, opts)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedIngressInterface.CreateCalls())
func (mock *IngressInterfaceMock) CreateCalls() []struct {
	Ctx     context.Context
	Ingress *netv1.Ingress
	Opts    metav1.CreateOptions
} {
	var calls []struct {
		Ctx     context.Context
		Ingress *netv1.Ingress
		Opts    metav1.CreateOptions
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *IngressInterfaceMock) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("IngressInterfaceMock.DeleteFunc: method is nil but IngressInterface.Delete was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Opts metav1.DeleteOptions
	}{
		Ctx:  ctx,
		Name: name,
		Opts: opts,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, name, opts)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedIngressInterface.DeleteCalls())
func (mock *IngressInterfaceMock) DeleteCalls() []struct {
	Ctx  context.Context
	Name string
	Opts metav1.DeleteOptions
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Opts metav1.DeleteOptions
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *IngressInterfaceMock) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("IngressInterfaceMock.DeleteCollectionFunc: method is nil but IngressInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Opts     metav1.DeleteOptions
		ListOpts metav1.ListOptions
	}{
		Ctx:      ctx,
		Opts:     opts,
		ListOpts: listOpts,
	}
	mock.lockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	mock.lockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(ctx, opts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//
//	len(mockedIngressInterface.DeleteCollectionCalls())
func (mock *IngressInterfaceMock) DeleteCollectionCalls() []struct {
	Ctx      context.Context
	Opts     metav1.DeleteOptions
	ListOpts metav1.ListOptions
} {
	var calls []struct {
		Ctx      context.Context
		Opts     metav1.DeleteOptions
		ListOpts metav1.ListOptions
	}
	mock.lockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	mock.lockDeleteCollection.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *IngressInterfaceMock) Get(ctx context.Context, name string, opts metav1.GetOptions) (*netv1.Ingress, error) {
	if mock.GetFunc == nil {
		panic("IngressInterfaceMock.GetFunc: method is nil but IngressInterface.Get was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Opts metav1.GetOptions
	}{
		Ctx:  ctx,
		Name: name,
		Opts: opts,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedIngressInterface.GetCalls())
func (mock *IngressInterfaceMock) GetCalls() []struct {
	Ctx  context.Context
	Name string
	Opts metav1.GetOptions
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Opts metav1.GetOptions
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *IngressInterfaceMock) List(ctx context.Context, opts metav1.ListOptions) (*netv1.IngressList, error) {
	if mock.ListFunc == nil {
		panic("IngressInterfaceMock.ListFunc: method is nil but IngressInterface.List was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts metav1.ListOptions
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedIngressInterface.ListCalls())
func (mock *IngressInterfaceMock) ListCalls() []struct {
	Ctx  context.Context
	Opts metav1.ListOptions
} {
	var calls []struct {
		Ctx  context.Context
		Opts metav1.ListOptions
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *IngressInterfaceMock) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*netv1.Ingress, error) {
	if mock.PatchFunc == nil {
		panic("IngressInterfaceMock.PatchFunc: method is nil but IngressInterface.Patch was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Name         string
		Pt           types.PatchType
		Data         []byte
		Opts         metav1.PatchOptions
		Subresources []string
	}{
		Ctx:          ctx,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Opts:         opts,
		Subresources: subresources,
	}
	mock.lockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	mock.lockPatch.Unlock()
	return mock.PatchFunc(ctx, name, pt, data, opts, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//
//	len(mockedIngressInterface.PatchCalls())
func (mock *IngressInterfaceMock) PatchCalls() []struct {
	Ctx          context.Context
	Name         string
	Pt           types.PatchType
	Data         []byte
	Opts         metav1.PatchOptions
	Subresources []string
} {
	var calls []struct {
		Ctx          context.Context
		Name         string
		Pt           types.PatchType
		Data         []byte
		Opts         metav1.PatchOptions
		Subresources []string
	}
	mock.lockPatch.RLock()
	calls = mock.calls.Patch
	mock.lockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *IngressInterfaceMock) Update(ctx context.Context, ingress *netv1.Ingress, opts metav1.UpdateOptions) (*netv1.Ingress, error) {
	if mock.UpdateFunc == nil {
		panic("IngressInterfaceMock.UpdateFunc: method is nil but IngressInterface.Update was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Ingress *netv1.Ingress
		Opts    metav1.UpdateOptions
	}{
		Ctx:     ctx,
		Ingress: ingress,
		Opts:    opts,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, ingress, opts)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedIngressInterface.UpdateCalls())
func (mock *IngressInterfaceMock) UpdateCalls() []struct {
	Ctx     context.Context
	Ingress *netv1.Ingress
	Opts    metav1.UpdateOptions
} {
	var calls []struct {
		Ctx     context.Context
		Ingress *netv1.Ingress
		Opts    metav1.UpdateOptions
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *IngressInterfaceMock) UpdateStatus(ctx context.Context, ingress *netv1.Ingress, opts metav1.UpdateOptions) (*netv1.Ingress, error) {
	if mock.UpdateStatusFunc == nil {
		panic("IngressInterfaceMock.UpdateStatusFunc: method is nil but IngressInterface.UpdateStatus was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Ingress *netv1.Ingress
		Opts    metav1.UpdateOptions
	}{
		Ctx:     ctx,
		Ingress: ingress,
		Opts:    opts,
	}
	mock.lockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	mock.lockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(ctx, ingress, opts)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//
//	len(mockedIngressInterface.UpdateStatusCalls())
func (mock *IngressInterfaceMock) UpdateStatusCalls() []struct {
	Ctx     context.Context
	Ingress *netv1.Ingress
	Opts    metav1.UpdateOptions
} {
	var calls []struct {
		Ctx     context.Context
		Ingress *netv1.Ingress
		Opts    metav1.UpdateOptions
	}
	mock.lockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	mock.lockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *IngressInterfaceMock) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("IngressInterfaceMock.WatchFunc: method is nil but IngressInterface.Watch was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts metav1.ListOptions
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	mock.lockWatch.Unlock()
	return mock.WatchFunc(ctx, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//
//	len(mockedIngressInterface.WatchCalls())
func (mock *IngressInterfaceMock) WatchCalls() []struct {
	Ctx  context.Context
	Opts metav1.ListOptions
} {
	var calls []struct {
		Ctx  context.Context
		Opts metav1.ListOptions
	}
	mock.lockWatch.RLock()
	calls = mock.calls.Watch
	mock.lockWatch.RUnlock()
	return calls
}

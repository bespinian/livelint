// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package livelint_test

import (
	"github.com/bespinian/livelint/internal/livelint"
	"k8s.io/client-go/discovery"
	admissionregistrationv1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1"
	admissionregistrationv1alpha1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1alpha1"
	admissionregistrationv1beta1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1beta1"
	apiserverinternalv1alpha1 "k8s.io/client-go/kubernetes/typed/apiserverinternal/v1alpha1"
	appsv1 "k8s.io/client-go/kubernetes/typed/apps/v1"
	appsv1beta1 "k8s.io/client-go/kubernetes/typed/apps/v1beta1"
	appsv1beta2 "k8s.io/client-go/kubernetes/typed/apps/v1beta2"
	authenticationv1 "k8s.io/client-go/kubernetes/typed/authentication/v1"
	authenticationv1alpha1 "k8s.io/client-go/kubernetes/typed/authentication/v1alpha1"
	authenticationv1beta1 "k8s.io/client-go/kubernetes/typed/authentication/v1beta1"
	authorizationv1 "k8s.io/client-go/kubernetes/typed/authorization/v1"
	authorizationv1beta1 "k8s.io/client-go/kubernetes/typed/authorization/v1beta1"
	autoscalingv1 "k8s.io/client-go/kubernetes/typed/autoscaling/v1"
	"k8s.io/client-go/kubernetes/typed/autoscaling/v2"
	"k8s.io/client-go/kubernetes/typed/autoscaling/v2beta1"
	"k8s.io/client-go/kubernetes/typed/autoscaling/v2beta2"
	batchv1 "k8s.io/client-go/kubernetes/typed/batch/v1"
	batchv1beta1 "k8s.io/client-go/kubernetes/typed/batch/v1beta1"
	certificatesv1 "k8s.io/client-go/kubernetes/typed/certificates/v1"
	certificatesv1alpha1 "k8s.io/client-go/kubernetes/typed/certificates/v1alpha1"
	certificatesv1beta1 "k8s.io/client-go/kubernetes/typed/certificates/v1beta1"
	coordinationv1 "k8s.io/client-go/kubernetes/typed/coordination/v1"
	coordinationv1beta1 "k8s.io/client-go/kubernetes/typed/coordination/v1beta1"
	apiv1 "k8s.io/client-go/kubernetes/typed/core/v1"
	discoveryv1 "k8s.io/client-go/kubernetes/typed/discovery/v1"
	discoveryv1beta1 "k8s.io/client-go/kubernetes/typed/discovery/v1beta1"
	eventsv1 "k8s.io/client-go/kubernetes/typed/events/v1"
	eventsv1beta1 "k8s.io/client-go/kubernetes/typed/events/v1beta1"
	extensionsv1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"
	flowcontrolv1alpha1 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1alpha1"
	flowcontrolv1beta1 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta1"
	flowcontrolv1beta2 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta2"
	"k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta3"
	netv1 "k8s.io/client-go/kubernetes/typed/networking/v1"
	networkingv1alpha1 "k8s.io/client-go/kubernetes/typed/networking/v1alpha1"
	networkingv1beta1 "k8s.io/client-go/kubernetes/typed/networking/v1beta1"
	nodev1 "k8s.io/client-go/kubernetes/typed/node/v1"
	nodev1alpha1 "k8s.io/client-go/kubernetes/typed/node/v1alpha1"
	nodev1beta1 "k8s.io/client-go/kubernetes/typed/node/v1beta1"
	policyv1 "k8s.io/client-go/kubernetes/typed/policy/v1"
	policyv1beta1 "k8s.io/client-go/kubernetes/typed/policy/v1beta1"
	rbacv1 "k8s.io/client-go/kubernetes/typed/rbac/v1"
	rbacv1alpha1 "k8s.io/client-go/kubernetes/typed/rbac/v1alpha1"
	rbacv1beta1 "k8s.io/client-go/kubernetes/typed/rbac/v1beta1"
	"k8s.io/client-go/kubernetes/typed/resource/v1alpha2"
	schedulingv1 "k8s.io/client-go/kubernetes/typed/scheduling/v1"
	schedulingv1alpha1 "k8s.io/client-go/kubernetes/typed/scheduling/v1alpha1"
	schedulingv1beta1 "k8s.io/client-go/kubernetes/typed/scheduling/v1beta1"
	storagev1 "k8s.io/client-go/kubernetes/typed/storage/v1"
	storagev1alpha1 "k8s.io/client-go/kubernetes/typed/storage/v1alpha1"
	"k8s.io/client-go/kubernetes/typed/storage/v1beta1"
	"sync"
)

// Ensure, that KubernetesInterfaceMock does implement livelint.KubernetesInterface.
// If this is not the case, regenerate this file with moq.
var _ livelint.KubernetesInterface = &KubernetesInterfaceMock{}

// KubernetesInterfaceMock is a mock implementation of livelint.KubernetesInterface.
//
//	func TestSomethingThatUsesKubernetesInterface(t *testing.T) {
//
//		// make and configure a mocked livelint.KubernetesInterface
//		mockedKubernetesInterface := &KubernetesInterfaceMock{
//			AdmissionregistrationV1Func: func() admissionregistrationv1.AdmissionregistrationV1Interface {
//				panic("mock out the AdmissionregistrationV1 method")
//			},
//			AdmissionregistrationV1alpha1Func: func() admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface {
//				panic("mock out the AdmissionregistrationV1alpha1 method")
//			},
//			AdmissionregistrationV1beta1Func: func() admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface {
//				panic("mock out the AdmissionregistrationV1beta1 method")
//			},
//			AppsV1Func: func() appsv1.AppsV1Interface {
//				panic("mock out the AppsV1 method")
//			},
//			AppsV1beta1Func: func() appsv1beta1.AppsV1beta1Interface {
//				panic("mock out the AppsV1beta1 method")
//			},
//			AppsV1beta2Func: func() appsv1beta2.AppsV1beta2Interface {
//				panic("mock out the AppsV1beta2 method")
//			},
//			AuthenticationV1Func: func() authenticationv1.AuthenticationV1Interface {
//				panic("mock out the AuthenticationV1 method")
//			},
//			AuthenticationV1alpha1Func: func() authenticationv1alpha1.AuthenticationV1alpha1Interface {
//				panic("mock out the AuthenticationV1alpha1 method")
//			},
//			AuthenticationV1beta1Func: func() authenticationv1beta1.AuthenticationV1beta1Interface {
//				panic("mock out the AuthenticationV1beta1 method")
//			},
//			AuthorizationV1Func: func() authorizationv1.AuthorizationV1Interface {
//				panic("mock out the AuthorizationV1 method")
//			},
//			AuthorizationV1beta1Func: func() authorizationv1beta1.AuthorizationV1beta1Interface {
//				panic("mock out the AuthorizationV1beta1 method")
//			},
//			AutoscalingV1Func: func() autoscalingv1.AutoscalingV1Interface {
//				panic("mock out the AutoscalingV1 method")
//			},
//			AutoscalingV2Func: func() v2.AutoscalingV2Interface {
//				panic("mock out the AutoscalingV2 method")
//			},
//			AutoscalingV2beta1Func: func() v2beta1.AutoscalingV2beta1Interface {
//				panic("mock out the AutoscalingV2beta1 method")
//			},
//			AutoscalingV2beta2Func: func() v2beta2.AutoscalingV2beta2Interface {
//				panic("mock out the AutoscalingV2beta2 method")
//			},
//			BatchV1Func: func() batchv1.BatchV1Interface {
//				panic("mock out the BatchV1 method")
//			},
//			BatchV1beta1Func: func() batchv1beta1.BatchV1beta1Interface {
//				panic("mock out the BatchV1beta1 method")
//			},
//			CertificatesV1Func: func() certificatesv1.CertificatesV1Interface {
//				panic("mock out the CertificatesV1 method")
//			},
//			CertificatesV1alpha1Func: func() certificatesv1alpha1.CertificatesV1alpha1Interface {
//				panic("mock out the CertificatesV1alpha1 method")
//			},
//			CertificatesV1beta1Func: func() certificatesv1beta1.CertificatesV1beta1Interface {
//				panic("mock out the CertificatesV1beta1 method")
//			},
//			CoordinationV1Func: func() coordinationv1.CoordinationV1Interface {
//				panic("mock out the CoordinationV1 method")
//			},
//			CoordinationV1beta1Func: func() coordinationv1beta1.CoordinationV1beta1Interface {
//				panic("mock out the CoordinationV1beta1 method")
//			},
//			CoreV1Func: func() apiv1.CoreV1Interface {
//				panic("mock out the CoreV1 method")
//			},
//			DiscoveryFunc: func() discovery.DiscoveryInterface {
//				panic("mock out the Discovery method")
//			},
//			DiscoveryV1Func: func() discoveryv1.DiscoveryV1Interface {
//				panic("mock out the DiscoveryV1 method")
//			},
//			DiscoveryV1beta1Func: func() discoveryv1beta1.DiscoveryV1beta1Interface {
//				panic("mock out the DiscoveryV1beta1 method")
//			},
//			EventsV1Func: func() eventsv1.EventsV1Interface {
//				panic("mock out the EventsV1 method")
//			},
//			EventsV1beta1Func: func() eventsv1beta1.EventsV1beta1Interface {
//				panic("mock out the EventsV1beta1 method")
//			},
//			ExtensionsV1beta1Func: func() extensionsv1beta1.ExtensionsV1beta1Interface {
//				panic("mock out the ExtensionsV1beta1 method")
//			},
//			FlowcontrolV1alpha1Func: func() flowcontrolv1alpha1.FlowcontrolV1alpha1Interface {
//				panic("mock out the FlowcontrolV1alpha1 method")
//			},
//			FlowcontrolV1beta1Func: func() flowcontrolv1beta1.FlowcontrolV1beta1Interface {
//				panic("mock out the FlowcontrolV1beta1 method")
//			},
//			FlowcontrolV1beta2Func: func() flowcontrolv1beta2.FlowcontrolV1beta2Interface {
//				panic("mock out the FlowcontrolV1beta2 method")
//			},
//			FlowcontrolV1beta3Func: func() v1beta3.FlowcontrolV1beta3Interface {
//				panic("mock out the FlowcontrolV1beta3 method")
//			},
//			InternalV1alpha1Func: func() apiserverinternalv1alpha1.InternalV1alpha1Interface {
//				panic("mock out the InternalV1alpha1 method")
//			},
//			NetworkingV1Func: func() netv1.NetworkingV1Interface {
//				panic("mock out the NetworkingV1 method")
//			},
//			NetworkingV1alpha1Func: func() networkingv1alpha1.NetworkingV1alpha1Interface {
//				panic("mock out the NetworkingV1alpha1 method")
//			},
//			NetworkingV1beta1Func: func() networkingv1beta1.NetworkingV1beta1Interface {
//				panic("mock out the NetworkingV1beta1 method")
//			},
//			NodeV1Func: func() nodev1.NodeV1Interface {
//				panic("mock out the NodeV1 method")
//			},
//			NodeV1alpha1Func: func() nodev1alpha1.NodeV1alpha1Interface {
//				panic("mock out the NodeV1alpha1 method")
//			},
//			NodeV1beta1Func: func() nodev1beta1.NodeV1beta1Interface {
//				panic("mock out the NodeV1beta1 method")
//			},
//			PolicyV1Func: func() policyv1.PolicyV1Interface {
//				panic("mock out the PolicyV1 method")
//			},
//			PolicyV1beta1Func: func() policyv1beta1.PolicyV1beta1Interface {
//				panic("mock out the PolicyV1beta1 method")
//			},
//			RbacV1Func: func() rbacv1.RbacV1Interface {
//				panic("mock out the RbacV1 method")
//			},
//			RbacV1alpha1Func: func() rbacv1alpha1.RbacV1alpha1Interface {
//				panic("mock out the RbacV1alpha1 method")
//			},
//			RbacV1beta1Func: func() rbacv1beta1.RbacV1beta1Interface {
//				panic("mock out the RbacV1beta1 method")
//			},
//			ResourceV1alpha2Func: func() v1alpha2.ResourceV1alpha2Interface {
//				panic("mock out the ResourceV1alpha2 method")
//			},
//			SchedulingV1Func: func() schedulingv1.SchedulingV1Interface {
//				panic("mock out the SchedulingV1 method")
//			},
//			SchedulingV1alpha1Func: func() schedulingv1alpha1.SchedulingV1alpha1Interface {
//				panic("mock out the SchedulingV1alpha1 method")
//			},
//			SchedulingV1beta1Func: func() schedulingv1beta1.SchedulingV1beta1Interface {
//				panic("mock out the SchedulingV1beta1 method")
//			},
//			StorageV1Func: func() storagev1.StorageV1Interface {
//				panic("mock out the StorageV1 method")
//			},
//			StorageV1alpha1Func: func() storagev1alpha1.StorageV1alpha1Interface {
//				panic("mock out the StorageV1alpha1 method")
//			},
//			StorageV1beta1Func: func() v1beta1.StorageV1beta1Interface {
//				panic("mock out the StorageV1beta1 method")
//			},
//		}
//
//		// use mockedKubernetesInterface in code that requires livelint.KubernetesInterface
//		// and then make assertions.
//
//	}
type KubernetesInterfaceMock struct {
	// AdmissionregistrationV1Func mocks the AdmissionregistrationV1 method.
	AdmissionregistrationV1Func func() admissionregistrationv1.AdmissionregistrationV1Interface

	// AdmissionregistrationV1alpha1Func mocks the AdmissionregistrationV1alpha1 method.
	AdmissionregistrationV1alpha1Func func() admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface

	// AdmissionregistrationV1beta1Func mocks the AdmissionregistrationV1beta1 method.
	AdmissionregistrationV1beta1Func func() admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface

	// AppsV1Func mocks the AppsV1 method.
	AppsV1Func func() appsv1.AppsV1Interface

	// AppsV1beta1Func mocks the AppsV1beta1 method.
	AppsV1beta1Func func() appsv1beta1.AppsV1beta1Interface

	// AppsV1beta2Func mocks the AppsV1beta2 method.
	AppsV1beta2Func func() appsv1beta2.AppsV1beta2Interface

	// AuthenticationV1Func mocks the AuthenticationV1 method.
	AuthenticationV1Func func() authenticationv1.AuthenticationV1Interface

	// AuthenticationV1alpha1Func mocks the AuthenticationV1alpha1 method.
	AuthenticationV1alpha1Func func() authenticationv1alpha1.AuthenticationV1alpha1Interface

	// AuthenticationV1beta1Func mocks the AuthenticationV1beta1 method.
	AuthenticationV1beta1Func func() authenticationv1beta1.AuthenticationV1beta1Interface

	// AuthorizationV1Func mocks the AuthorizationV1 method.
	AuthorizationV1Func func() authorizationv1.AuthorizationV1Interface

	// AuthorizationV1beta1Func mocks the AuthorizationV1beta1 method.
	AuthorizationV1beta1Func func() authorizationv1beta1.AuthorizationV1beta1Interface

	// AutoscalingV1Func mocks the AutoscalingV1 method.
	AutoscalingV1Func func() autoscalingv1.AutoscalingV1Interface

	// AutoscalingV2Func mocks the AutoscalingV2 method.
	AutoscalingV2Func func() v2.AutoscalingV2Interface

	// AutoscalingV2beta1Func mocks the AutoscalingV2beta1 method.
	AutoscalingV2beta1Func func() v2beta1.AutoscalingV2beta1Interface

	// AutoscalingV2beta2Func mocks the AutoscalingV2beta2 method.
	AutoscalingV2beta2Func func() v2beta2.AutoscalingV2beta2Interface

	// BatchV1Func mocks the BatchV1 method.
	BatchV1Func func() batchv1.BatchV1Interface

	// BatchV1beta1Func mocks the BatchV1beta1 method.
	BatchV1beta1Func func() batchv1beta1.BatchV1beta1Interface

	// CertificatesV1Func mocks the CertificatesV1 method.
	CertificatesV1Func func() certificatesv1.CertificatesV1Interface

	// CertificatesV1alpha1Func mocks the CertificatesV1alpha1 method.
	CertificatesV1alpha1Func func() certificatesv1alpha1.CertificatesV1alpha1Interface

	// CertificatesV1beta1Func mocks the CertificatesV1beta1 method.
	CertificatesV1beta1Func func() certificatesv1beta1.CertificatesV1beta1Interface

	// CoordinationV1Func mocks the CoordinationV1 method.
	CoordinationV1Func func() coordinationv1.CoordinationV1Interface

	// CoordinationV1beta1Func mocks the CoordinationV1beta1 method.
	CoordinationV1beta1Func func() coordinationv1beta1.CoordinationV1beta1Interface

	// CoreV1Func mocks the CoreV1 method.
	CoreV1Func func() apiv1.CoreV1Interface

	// DiscoveryFunc mocks the Discovery method.
	DiscoveryFunc func() discovery.DiscoveryInterface

	// DiscoveryV1Func mocks the DiscoveryV1 method.
	DiscoveryV1Func func() discoveryv1.DiscoveryV1Interface

	// DiscoveryV1beta1Func mocks the DiscoveryV1beta1 method.
	DiscoveryV1beta1Func func() discoveryv1beta1.DiscoveryV1beta1Interface

	// EventsV1Func mocks the EventsV1 method.
	EventsV1Func func() eventsv1.EventsV1Interface

	// EventsV1beta1Func mocks the EventsV1beta1 method.
	EventsV1beta1Func func() eventsv1beta1.EventsV1beta1Interface

	// ExtensionsV1beta1Func mocks the ExtensionsV1beta1 method.
	ExtensionsV1beta1Func func() extensionsv1beta1.ExtensionsV1beta1Interface

	// FlowcontrolV1alpha1Func mocks the FlowcontrolV1alpha1 method.
	FlowcontrolV1alpha1Func func() flowcontrolv1alpha1.FlowcontrolV1alpha1Interface

	// FlowcontrolV1beta1Func mocks the FlowcontrolV1beta1 method.
	FlowcontrolV1beta1Func func() flowcontrolv1beta1.FlowcontrolV1beta1Interface

	// FlowcontrolV1beta2Func mocks the FlowcontrolV1beta2 method.
	FlowcontrolV1beta2Func func() flowcontrolv1beta2.FlowcontrolV1beta2Interface

	// FlowcontrolV1beta3Func mocks the FlowcontrolV1beta3 method.
	FlowcontrolV1beta3Func func() v1beta3.FlowcontrolV1beta3Interface

	// InternalV1alpha1Func mocks the InternalV1alpha1 method.
	InternalV1alpha1Func func() apiserverinternalv1alpha1.InternalV1alpha1Interface

	// NetworkingV1Func mocks the NetworkingV1 method.
	NetworkingV1Func func() netv1.NetworkingV1Interface

	// NetworkingV1alpha1Func mocks the NetworkingV1alpha1 method.
	NetworkingV1alpha1Func func() networkingv1alpha1.NetworkingV1alpha1Interface

	// NetworkingV1beta1Func mocks the NetworkingV1beta1 method.
	NetworkingV1beta1Func func() networkingv1beta1.NetworkingV1beta1Interface

	// NodeV1Func mocks the NodeV1 method.
	NodeV1Func func() nodev1.NodeV1Interface

	// NodeV1alpha1Func mocks the NodeV1alpha1 method.
	NodeV1alpha1Func func() nodev1alpha1.NodeV1alpha1Interface

	// NodeV1beta1Func mocks the NodeV1beta1 method.
	NodeV1beta1Func func() nodev1beta1.NodeV1beta1Interface

	// PolicyV1Func mocks the PolicyV1 method.
	PolicyV1Func func() policyv1.PolicyV1Interface

	// PolicyV1beta1Func mocks the PolicyV1beta1 method.
	PolicyV1beta1Func func() policyv1beta1.PolicyV1beta1Interface

	// RbacV1Func mocks the RbacV1 method.
	RbacV1Func func() rbacv1.RbacV1Interface

	// RbacV1alpha1Func mocks the RbacV1alpha1 method.
	RbacV1alpha1Func func() rbacv1alpha1.RbacV1alpha1Interface

	// RbacV1beta1Func mocks the RbacV1beta1 method.
	RbacV1beta1Func func() rbacv1beta1.RbacV1beta1Interface

	// ResourceV1alpha2Func mocks the ResourceV1alpha2 method.
	ResourceV1alpha2Func func() v1alpha2.ResourceV1alpha2Interface

	// SchedulingV1Func mocks the SchedulingV1 method.
	SchedulingV1Func func() schedulingv1.SchedulingV1Interface

	// SchedulingV1alpha1Func mocks the SchedulingV1alpha1 method.
	SchedulingV1alpha1Func func() schedulingv1alpha1.SchedulingV1alpha1Interface

	// SchedulingV1beta1Func mocks the SchedulingV1beta1 method.
	SchedulingV1beta1Func func() schedulingv1beta1.SchedulingV1beta1Interface

	// StorageV1Func mocks the StorageV1 method.
	StorageV1Func func() storagev1.StorageV1Interface

	// StorageV1alpha1Func mocks the StorageV1alpha1 method.
	StorageV1alpha1Func func() storagev1alpha1.StorageV1alpha1Interface

	// StorageV1beta1Func mocks the StorageV1beta1 method.
	StorageV1beta1Func func() v1beta1.StorageV1beta1Interface

	// calls tracks calls to the methods.
	calls struct {
		// AdmissionregistrationV1 holds details about calls to the AdmissionregistrationV1 method.
		AdmissionregistrationV1 []struct {
		}
		// AdmissionregistrationV1alpha1 holds details about calls to the AdmissionregistrationV1alpha1 method.
		AdmissionregistrationV1alpha1 []struct {
		}
		// AdmissionregistrationV1beta1 holds details about calls to the AdmissionregistrationV1beta1 method.
		AdmissionregistrationV1beta1 []struct {
		}
		// AppsV1 holds details about calls to the AppsV1 method.
		AppsV1 []struct {
		}
		// AppsV1beta1 holds details about calls to the AppsV1beta1 method.
		AppsV1beta1 []struct {
		}
		// AppsV1beta2 holds details about calls to the AppsV1beta2 method.
		AppsV1beta2 []struct {
		}
		// AuthenticationV1 holds details about calls to the AuthenticationV1 method.
		AuthenticationV1 []struct {
		}
		// AuthenticationV1alpha1 holds details about calls to the AuthenticationV1alpha1 method.
		AuthenticationV1alpha1 []struct {
		}
		// AuthenticationV1beta1 holds details about calls to the AuthenticationV1beta1 method.
		AuthenticationV1beta1 []struct {
		}
		// AuthorizationV1 holds details about calls to the AuthorizationV1 method.
		AuthorizationV1 []struct {
		}
		// AuthorizationV1beta1 holds details about calls to the AuthorizationV1beta1 method.
		AuthorizationV1beta1 []struct {
		}
		// AutoscalingV1 holds details about calls to the AutoscalingV1 method.
		AutoscalingV1 []struct {
		}
		// AutoscalingV2 holds details about calls to the AutoscalingV2 method.
		AutoscalingV2 []struct {
		}
		// AutoscalingV2beta1 holds details about calls to the AutoscalingV2beta1 method.
		AutoscalingV2beta1 []struct {
		}
		// AutoscalingV2beta2 holds details about calls to the AutoscalingV2beta2 method.
		AutoscalingV2beta2 []struct {
		}
		// BatchV1 holds details about calls to the BatchV1 method.
		BatchV1 []struct {
		}
		// BatchV1beta1 holds details about calls to the BatchV1beta1 method.
		BatchV1beta1 []struct {
		}
		// CertificatesV1 holds details about calls to the CertificatesV1 method.
		CertificatesV1 []struct {
		}
		// CertificatesV1alpha1 holds details about calls to the CertificatesV1alpha1 method.
		CertificatesV1alpha1 []struct {
		}
		// CertificatesV1beta1 holds details about calls to the CertificatesV1beta1 method.
		CertificatesV1beta1 []struct {
		}
		// CoordinationV1 holds details about calls to the CoordinationV1 method.
		CoordinationV1 []struct {
		}
		// CoordinationV1beta1 holds details about calls to the CoordinationV1beta1 method.
		CoordinationV1beta1 []struct {
		}
		// CoreV1 holds details about calls to the CoreV1 method.
		CoreV1 []struct {
		}
		// Discovery holds details about calls to the Discovery method.
		Discovery []struct {
		}
		// DiscoveryV1 holds details about calls to the DiscoveryV1 method.
		DiscoveryV1 []struct {
		}
		// DiscoveryV1beta1 holds details about calls to the DiscoveryV1beta1 method.
		DiscoveryV1beta1 []struct {
		}
		// EventsV1 holds details about calls to the EventsV1 method.
		EventsV1 []struct {
		}
		// EventsV1beta1 holds details about calls to the EventsV1beta1 method.
		EventsV1beta1 []struct {
		}
		// ExtensionsV1beta1 holds details about calls to the ExtensionsV1beta1 method.
		ExtensionsV1beta1 []struct {
		}
		// FlowcontrolV1alpha1 holds details about calls to the FlowcontrolV1alpha1 method.
		FlowcontrolV1alpha1 []struct {
		}
		// FlowcontrolV1beta1 holds details about calls to the FlowcontrolV1beta1 method.
		FlowcontrolV1beta1 []struct {
		}
		// FlowcontrolV1beta2 holds details about calls to the FlowcontrolV1beta2 method.
		FlowcontrolV1beta2 []struct {
		}
		// FlowcontrolV1beta3 holds details about calls to the FlowcontrolV1beta3 method.
		FlowcontrolV1beta3 []struct {
		}
		// InternalV1alpha1 holds details about calls to the InternalV1alpha1 method.
		InternalV1alpha1 []struct {
		}
		// NetworkingV1 holds details about calls to the NetworkingV1 method.
		NetworkingV1 []struct {
		}
		// NetworkingV1alpha1 holds details about calls to the NetworkingV1alpha1 method.
		NetworkingV1alpha1 []struct {
		}
		// NetworkingV1beta1 holds details about calls to the NetworkingV1beta1 method.
		NetworkingV1beta1 []struct {
		}
		// NodeV1 holds details about calls to the NodeV1 method.
		NodeV1 []struct {
		}
		// NodeV1alpha1 holds details about calls to the NodeV1alpha1 method.
		NodeV1alpha1 []struct {
		}
		// NodeV1beta1 holds details about calls to the NodeV1beta1 method.
		NodeV1beta1 []struct {
		}
		// PolicyV1 holds details about calls to the PolicyV1 method.
		PolicyV1 []struct {
		}
		// PolicyV1beta1 holds details about calls to the PolicyV1beta1 method.
		PolicyV1beta1 []struct {
		}
		// RbacV1 holds details about calls to the RbacV1 method.
		RbacV1 []struct {
		}
		// RbacV1alpha1 holds details about calls to the RbacV1alpha1 method.
		RbacV1alpha1 []struct {
		}
		// RbacV1beta1 holds details about calls to the RbacV1beta1 method.
		RbacV1beta1 []struct {
		}
		// ResourceV1alpha2 holds details about calls to the ResourceV1alpha2 method.
		ResourceV1alpha2 []struct {
		}
		// SchedulingV1 holds details about calls to the SchedulingV1 method.
		SchedulingV1 []struct {
		}
		// SchedulingV1alpha1 holds details about calls to the SchedulingV1alpha1 method.
		SchedulingV1alpha1 []struct {
		}
		// SchedulingV1beta1 holds details about calls to the SchedulingV1beta1 method.
		SchedulingV1beta1 []struct {
		}
		// StorageV1 holds details about calls to the StorageV1 method.
		StorageV1 []struct {
		}
		// StorageV1alpha1 holds details about calls to the StorageV1alpha1 method.
		StorageV1alpha1 []struct {
		}
		// StorageV1beta1 holds details about calls to the StorageV1beta1 method.
		StorageV1beta1 []struct {
		}
	}
	lockAdmissionregistrationV1       sync.RWMutex
	lockAdmissionregistrationV1alpha1 sync.RWMutex
	lockAdmissionregistrationV1beta1  sync.RWMutex
	lockAppsV1                        sync.RWMutex
	lockAppsV1beta1                   sync.RWMutex
	lockAppsV1beta2                   sync.RWMutex
	lockAuthenticationV1              sync.RWMutex
	lockAuthenticationV1alpha1        sync.RWMutex
	lockAuthenticationV1beta1         sync.RWMutex
	lockAuthorizationV1               sync.RWMutex
	lockAuthorizationV1beta1          sync.RWMutex
	lockAutoscalingV1                 sync.RWMutex
	lockAutoscalingV2                 sync.RWMutex
	lockAutoscalingV2beta1            sync.RWMutex
	lockAutoscalingV2beta2            sync.RWMutex
	lockBatchV1                       sync.RWMutex
	lockBatchV1beta1                  sync.RWMutex
	lockCertificatesV1                sync.RWMutex
	lockCertificatesV1alpha1          sync.RWMutex
	lockCertificatesV1beta1           sync.RWMutex
	lockCoordinationV1                sync.RWMutex
	lockCoordinationV1beta1           sync.RWMutex
	lockCoreV1                        sync.RWMutex
	lockDiscovery                     sync.RWMutex
	lockDiscoveryV1                   sync.RWMutex
	lockDiscoveryV1beta1              sync.RWMutex
	lockEventsV1                      sync.RWMutex
	lockEventsV1beta1                 sync.RWMutex
	lockExtensionsV1beta1             sync.RWMutex
	lockFlowcontrolV1alpha1           sync.RWMutex
	lockFlowcontrolV1beta1            sync.RWMutex
	lockFlowcontrolV1beta2            sync.RWMutex
	lockFlowcontrolV1beta3            sync.RWMutex
	lockInternalV1alpha1              sync.RWMutex
	lockNetworkingV1                  sync.RWMutex
	lockNetworkingV1alpha1            sync.RWMutex
	lockNetworkingV1beta1             sync.RWMutex
	lockNodeV1                        sync.RWMutex
	lockNodeV1alpha1                  sync.RWMutex
	lockNodeV1beta1                   sync.RWMutex
	lockPolicyV1                      sync.RWMutex
	lockPolicyV1beta1                 sync.RWMutex
	lockRbacV1                        sync.RWMutex
	lockRbacV1alpha1                  sync.RWMutex
	lockRbacV1beta1                   sync.RWMutex
	lockResourceV1alpha2              sync.RWMutex
	lockSchedulingV1                  sync.RWMutex
	lockSchedulingV1alpha1            sync.RWMutex
	lockSchedulingV1beta1             sync.RWMutex
	lockStorageV1                     sync.RWMutex
	lockStorageV1alpha1               sync.RWMutex
	lockStorageV1beta1                sync.RWMutex
}

// AdmissionregistrationV1 calls AdmissionregistrationV1Func.
func (mock *KubernetesInterfaceMock) AdmissionregistrationV1() admissionregistrationv1.AdmissionregistrationV1Interface {
	if mock.AdmissionregistrationV1Func == nil {
		panic("KubernetesInterfaceMock.AdmissionregistrationV1Func: method is nil but KubernetesInterface.AdmissionregistrationV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAdmissionregistrationV1.Lock()
	mock.calls.AdmissionregistrationV1 = append(mock.calls.AdmissionregistrationV1, callInfo)
	mock.lockAdmissionregistrationV1.Unlock()
	return mock.AdmissionregistrationV1Func()
}

// AdmissionregistrationV1Calls gets all the calls that were made to AdmissionregistrationV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.AdmissionregistrationV1Calls())
func (mock *KubernetesInterfaceMock) AdmissionregistrationV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAdmissionregistrationV1.RLock()
	calls = mock.calls.AdmissionregistrationV1
	mock.lockAdmissionregistrationV1.RUnlock()
	return calls
}

// AdmissionregistrationV1alpha1 calls AdmissionregistrationV1alpha1Func.
func (mock *KubernetesInterfaceMock) AdmissionregistrationV1alpha1() admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface {
	if mock.AdmissionregistrationV1alpha1Func == nil {
		panic("KubernetesInterfaceMock.AdmissionregistrationV1alpha1Func: method is nil but KubernetesInterface.AdmissionregistrationV1alpha1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAdmissionregistrationV1alpha1.Lock()
	mock.calls.AdmissionregistrationV1alpha1 = append(mock.calls.AdmissionregistrationV1alpha1, callInfo)
	mock.lockAdmissionregistrationV1alpha1.Unlock()
	return mock.AdmissionregistrationV1alpha1Func()
}

// AdmissionregistrationV1alpha1Calls gets all the calls that were made to AdmissionregistrationV1alpha1.
// Check the length with:
//
//	len(mockedKubernetesInterface.AdmissionregistrationV1alpha1Calls())
func (mock *KubernetesInterfaceMock) AdmissionregistrationV1alpha1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAdmissionregistrationV1alpha1.RLock()
	calls = mock.calls.AdmissionregistrationV1alpha1
	mock.lockAdmissionregistrationV1alpha1.RUnlock()
	return calls
}

// AdmissionregistrationV1beta1 calls AdmissionregistrationV1beta1Func.
func (mock *KubernetesInterfaceMock) AdmissionregistrationV1beta1() admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface {
	if mock.AdmissionregistrationV1beta1Func == nil {
		panic("KubernetesInterfaceMock.AdmissionregistrationV1beta1Func: method is nil but KubernetesInterface.AdmissionregistrationV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAdmissionregistrationV1beta1.Lock()
	mock.calls.AdmissionregistrationV1beta1 = append(mock.calls.AdmissionregistrationV1beta1, callInfo)
	mock.lockAdmissionregistrationV1beta1.Unlock()
	return mock.AdmissionregistrationV1beta1Func()
}

// AdmissionregistrationV1beta1Calls gets all the calls that were made to AdmissionregistrationV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.AdmissionregistrationV1beta1Calls())
func (mock *KubernetesInterfaceMock) AdmissionregistrationV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAdmissionregistrationV1beta1.RLock()
	calls = mock.calls.AdmissionregistrationV1beta1
	mock.lockAdmissionregistrationV1beta1.RUnlock()
	return calls
}

// AppsV1 calls AppsV1Func.
func (mock *KubernetesInterfaceMock) AppsV1() appsv1.AppsV1Interface {
	if mock.AppsV1Func == nil {
		panic("KubernetesInterfaceMock.AppsV1Func: method is nil but KubernetesInterface.AppsV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAppsV1.Lock()
	mock.calls.AppsV1 = append(mock.calls.AppsV1, callInfo)
	mock.lockAppsV1.Unlock()
	return mock.AppsV1Func()
}

// AppsV1Calls gets all the calls that were made to AppsV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.AppsV1Calls())
func (mock *KubernetesInterfaceMock) AppsV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAppsV1.RLock()
	calls = mock.calls.AppsV1
	mock.lockAppsV1.RUnlock()
	return calls
}

// AppsV1beta1 calls AppsV1beta1Func.
func (mock *KubernetesInterfaceMock) AppsV1beta1() appsv1beta1.AppsV1beta1Interface {
	if mock.AppsV1beta1Func == nil {
		panic("KubernetesInterfaceMock.AppsV1beta1Func: method is nil but KubernetesInterface.AppsV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAppsV1beta1.Lock()
	mock.calls.AppsV1beta1 = append(mock.calls.AppsV1beta1, callInfo)
	mock.lockAppsV1beta1.Unlock()
	return mock.AppsV1beta1Func()
}

// AppsV1beta1Calls gets all the calls that were made to AppsV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.AppsV1beta1Calls())
func (mock *KubernetesInterfaceMock) AppsV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAppsV1beta1.RLock()
	calls = mock.calls.AppsV1beta1
	mock.lockAppsV1beta1.RUnlock()
	return calls
}

// AppsV1beta2 calls AppsV1beta2Func.
func (mock *KubernetesInterfaceMock) AppsV1beta2() appsv1beta2.AppsV1beta2Interface {
	if mock.AppsV1beta2Func == nil {
		panic("KubernetesInterfaceMock.AppsV1beta2Func: method is nil but KubernetesInterface.AppsV1beta2 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAppsV1beta2.Lock()
	mock.calls.AppsV1beta2 = append(mock.calls.AppsV1beta2, callInfo)
	mock.lockAppsV1beta2.Unlock()
	return mock.AppsV1beta2Func()
}

// AppsV1beta2Calls gets all the calls that were made to AppsV1beta2.
// Check the length with:
//
//	len(mockedKubernetesInterface.AppsV1beta2Calls())
func (mock *KubernetesInterfaceMock) AppsV1beta2Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAppsV1beta2.RLock()
	calls = mock.calls.AppsV1beta2
	mock.lockAppsV1beta2.RUnlock()
	return calls
}

// AuthenticationV1 calls AuthenticationV1Func.
func (mock *KubernetesInterfaceMock) AuthenticationV1() authenticationv1.AuthenticationV1Interface {
	if mock.AuthenticationV1Func == nil {
		panic("KubernetesInterfaceMock.AuthenticationV1Func: method is nil but KubernetesInterface.AuthenticationV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAuthenticationV1.Lock()
	mock.calls.AuthenticationV1 = append(mock.calls.AuthenticationV1, callInfo)
	mock.lockAuthenticationV1.Unlock()
	return mock.AuthenticationV1Func()
}

// AuthenticationV1Calls gets all the calls that were made to AuthenticationV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.AuthenticationV1Calls())
func (mock *KubernetesInterfaceMock) AuthenticationV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAuthenticationV1.RLock()
	calls = mock.calls.AuthenticationV1
	mock.lockAuthenticationV1.RUnlock()
	return calls
}

// AuthenticationV1alpha1 calls AuthenticationV1alpha1Func.
func (mock *KubernetesInterfaceMock) AuthenticationV1alpha1() authenticationv1alpha1.AuthenticationV1alpha1Interface {
	if mock.AuthenticationV1alpha1Func == nil {
		panic("KubernetesInterfaceMock.AuthenticationV1alpha1Func: method is nil but KubernetesInterface.AuthenticationV1alpha1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAuthenticationV1alpha1.Lock()
	mock.calls.AuthenticationV1alpha1 = append(mock.calls.AuthenticationV1alpha1, callInfo)
	mock.lockAuthenticationV1alpha1.Unlock()
	return mock.AuthenticationV1alpha1Func()
}

// AuthenticationV1alpha1Calls gets all the calls that were made to AuthenticationV1alpha1.
// Check the length with:
//
//	len(mockedKubernetesInterface.AuthenticationV1alpha1Calls())
func (mock *KubernetesInterfaceMock) AuthenticationV1alpha1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAuthenticationV1alpha1.RLock()
	calls = mock.calls.AuthenticationV1alpha1
	mock.lockAuthenticationV1alpha1.RUnlock()
	return calls
}

// AuthenticationV1beta1 calls AuthenticationV1beta1Func.
func (mock *KubernetesInterfaceMock) AuthenticationV1beta1() authenticationv1beta1.AuthenticationV1beta1Interface {
	if mock.AuthenticationV1beta1Func == nil {
		panic("KubernetesInterfaceMock.AuthenticationV1beta1Func: method is nil but KubernetesInterface.AuthenticationV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAuthenticationV1beta1.Lock()
	mock.calls.AuthenticationV1beta1 = append(mock.calls.AuthenticationV1beta1, callInfo)
	mock.lockAuthenticationV1beta1.Unlock()
	return mock.AuthenticationV1beta1Func()
}

// AuthenticationV1beta1Calls gets all the calls that were made to AuthenticationV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.AuthenticationV1beta1Calls())
func (mock *KubernetesInterfaceMock) AuthenticationV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAuthenticationV1beta1.RLock()
	calls = mock.calls.AuthenticationV1beta1
	mock.lockAuthenticationV1beta1.RUnlock()
	return calls
}

// AuthorizationV1 calls AuthorizationV1Func.
func (mock *KubernetesInterfaceMock) AuthorizationV1() authorizationv1.AuthorizationV1Interface {
	if mock.AuthorizationV1Func == nil {
		panic("KubernetesInterfaceMock.AuthorizationV1Func: method is nil but KubernetesInterface.AuthorizationV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAuthorizationV1.Lock()
	mock.calls.AuthorizationV1 = append(mock.calls.AuthorizationV1, callInfo)
	mock.lockAuthorizationV1.Unlock()
	return mock.AuthorizationV1Func()
}

// AuthorizationV1Calls gets all the calls that were made to AuthorizationV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.AuthorizationV1Calls())
func (mock *KubernetesInterfaceMock) AuthorizationV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAuthorizationV1.RLock()
	calls = mock.calls.AuthorizationV1
	mock.lockAuthorizationV1.RUnlock()
	return calls
}

// AuthorizationV1beta1 calls AuthorizationV1beta1Func.
func (mock *KubernetesInterfaceMock) AuthorizationV1beta1() authorizationv1beta1.AuthorizationV1beta1Interface {
	if mock.AuthorizationV1beta1Func == nil {
		panic("KubernetesInterfaceMock.AuthorizationV1beta1Func: method is nil but KubernetesInterface.AuthorizationV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAuthorizationV1beta1.Lock()
	mock.calls.AuthorizationV1beta1 = append(mock.calls.AuthorizationV1beta1, callInfo)
	mock.lockAuthorizationV1beta1.Unlock()
	return mock.AuthorizationV1beta1Func()
}

// AuthorizationV1beta1Calls gets all the calls that were made to AuthorizationV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.AuthorizationV1beta1Calls())
func (mock *KubernetesInterfaceMock) AuthorizationV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAuthorizationV1beta1.RLock()
	calls = mock.calls.AuthorizationV1beta1
	mock.lockAuthorizationV1beta1.RUnlock()
	return calls
}

// AutoscalingV1 calls AutoscalingV1Func.
func (mock *KubernetesInterfaceMock) AutoscalingV1() autoscalingv1.AutoscalingV1Interface {
	if mock.AutoscalingV1Func == nil {
		panic("KubernetesInterfaceMock.AutoscalingV1Func: method is nil but KubernetesInterface.AutoscalingV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAutoscalingV1.Lock()
	mock.calls.AutoscalingV1 = append(mock.calls.AutoscalingV1, callInfo)
	mock.lockAutoscalingV1.Unlock()
	return mock.AutoscalingV1Func()
}

// AutoscalingV1Calls gets all the calls that were made to AutoscalingV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.AutoscalingV1Calls())
func (mock *KubernetesInterfaceMock) AutoscalingV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAutoscalingV1.RLock()
	calls = mock.calls.AutoscalingV1
	mock.lockAutoscalingV1.RUnlock()
	return calls
}

// AutoscalingV2 calls AutoscalingV2Func.
func (mock *KubernetesInterfaceMock) AutoscalingV2() v2.AutoscalingV2Interface {
	if mock.AutoscalingV2Func == nil {
		panic("KubernetesInterfaceMock.AutoscalingV2Func: method is nil but KubernetesInterface.AutoscalingV2 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAutoscalingV2.Lock()
	mock.calls.AutoscalingV2 = append(mock.calls.AutoscalingV2, callInfo)
	mock.lockAutoscalingV2.Unlock()
	return mock.AutoscalingV2Func()
}

// AutoscalingV2Calls gets all the calls that were made to AutoscalingV2.
// Check the length with:
//
//	len(mockedKubernetesInterface.AutoscalingV2Calls())
func (mock *KubernetesInterfaceMock) AutoscalingV2Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAutoscalingV2.RLock()
	calls = mock.calls.AutoscalingV2
	mock.lockAutoscalingV2.RUnlock()
	return calls
}

// AutoscalingV2beta1 calls AutoscalingV2beta1Func.
func (mock *KubernetesInterfaceMock) AutoscalingV2beta1() v2beta1.AutoscalingV2beta1Interface {
	if mock.AutoscalingV2beta1Func == nil {
		panic("KubernetesInterfaceMock.AutoscalingV2beta1Func: method is nil but KubernetesInterface.AutoscalingV2beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAutoscalingV2beta1.Lock()
	mock.calls.AutoscalingV2beta1 = append(mock.calls.AutoscalingV2beta1, callInfo)
	mock.lockAutoscalingV2beta1.Unlock()
	return mock.AutoscalingV2beta1Func()
}

// AutoscalingV2beta1Calls gets all the calls that were made to AutoscalingV2beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.AutoscalingV2beta1Calls())
func (mock *KubernetesInterfaceMock) AutoscalingV2beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAutoscalingV2beta1.RLock()
	calls = mock.calls.AutoscalingV2beta1
	mock.lockAutoscalingV2beta1.RUnlock()
	return calls
}

// AutoscalingV2beta2 calls AutoscalingV2beta2Func.
func (mock *KubernetesInterfaceMock) AutoscalingV2beta2() v2beta2.AutoscalingV2beta2Interface {
	if mock.AutoscalingV2beta2Func == nil {
		panic("KubernetesInterfaceMock.AutoscalingV2beta2Func: method is nil but KubernetesInterface.AutoscalingV2beta2 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAutoscalingV2beta2.Lock()
	mock.calls.AutoscalingV2beta2 = append(mock.calls.AutoscalingV2beta2, callInfo)
	mock.lockAutoscalingV2beta2.Unlock()
	return mock.AutoscalingV2beta2Func()
}

// AutoscalingV2beta2Calls gets all the calls that were made to AutoscalingV2beta2.
// Check the length with:
//
//	len(mockedKubernetesInterface.AutoscalingV2beta2Calls())
func (mock *KubernetesInterfaceMock) AutoscalingV2beta2Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockAutoscalingV2beta2.RLock()
	calls = mock.calls.AutoscalingV2beta2
	mock.lockAutoscalingV2beta2.RUnlock()
	return calls
}

// BatchV1 calls BatchV1Func.
func (mock *KubernetesInterfaceMock) BatchV1() batchv1.BatchV1Interface {
	if mock.BatchV1Func == nil {
		panic("KubernetesInterfaceMock.BatchV1Func: method is nil but KubernetesInterface.BatchV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBatchV1.Lock()
	mock.calls.BatchV1 = append(mock.calls.BatchV1, callInfo)
	mock.lockBatchV1.Unlock()
	return mock.BatchV1Func()
}

// BatchV1Calls gets all the calls that were made to BatchV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.BatchV1Calls())
func (mock *KubernetesInterfaceMock) BatchV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockBatchV1.RLock()
	calls = mock.calls.BatchV1
	mock.lockBatchV1.RUnlock()
	return calls
}

// BatchV1beta1 calls BatchV1beta1Func.
func (mock *KubernetesInterfaceMock) BatchV1beta1() batchv1beta1.BatchV1beta1Interface {
	if mock.BatchV1beta1Func == nil {
		panic("KubernetesInterfaceMock.BatchV1beta1Func: method is nil but KubernetesInterface.BatchV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBatchV1beta1.Lock()
	mock.calls.BatchV1beta1 = append(mock.calls.BatchV1beta1, callInfo)
	mock.lockBatchV1beta1.Unlock()
	return mock.BatchV1beta1Func()
}

// BatchV1beta1Calls gets all the calls that were made to BatchV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.BatchV1beta1Calls())
func (mock *KubernetesInterfaceMock) BatchV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockBatchV1beta1.RLock()
	calls = mock.calls.BatchV1beta1
	mock.lockBatchV1beta1.RUnlock()
	return calls
}

// CertificatesV1 calls CertificatesV1Func.
func (mock *KubernetesInterfaceMock) CertificatesV1() certificatesv1.CertificatesV1Interface {
	if mock.CertificatesV1Func == nil {
		panic("KubernetesInterfaceMock.CertificatesV1Func: method is nil but KubernetesInterface.CertificatesV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCertificatesV1.Lock()
	mock.calls.CertificatesV1 = append(mock.calls.CertificatesV1, callInfo)
	mock.lockCertificatesV1.Unlock()
	return mock.CertificatesV1Func()
}

// CertificatesV1Calls gets all the calls that were made to CertificatesV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.CertificatesV1Calls())
func (mock *KubernetesInterfaceMock) CertificatesV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockCertificatesV1.RLock()
	calls = mock.calls.CertificatesV1
	mock.lockCertificatesV1.RUnlock()
	return calls
}

// CertificatesV1alpha1 calls CertificatesV1alpha1Func.
func (mock *KubernetesInterfaceMock) CertificatesV1alpha1() certificatesv1alpha1.CertificatesV1alpha1Interface {
	if mock.CertificatesV1alpha1Func == nil {
		panic("KubernetesInterfaceMock.CertificatesV1alpha1Func: method is nil but KubernetesInterface.CertificatesV1alpha1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCertificatesV1alpha1.Lock()
	mock.calls.CertificatesV1alpha1 = append(mock.calls.CertificatesV1alpha1, callInfo)
	mock.lockCertificatesV1alpha1.Unlock()
	return mock.CertificatesV1alpha1Func()
}

// CertificatesV1alpha1Calls gets all the calls that were made to CertificatesV1alpha1.
// Check the length with:
//
//	len(mockedKubernetesInterface.CertificatesV1alpha1Calls())
func (mock *KubernetesInterfaceMock) CertificatesV1alpha1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockCertificatesV1alpha1.RLock()
	calls = mock.calls.CertificatesV1alpha1
	mock.lockCertificatesV1alpha1.RUnlock()
	return calls
}

// CertificatesV1beta1 calls CertificatesV1beta1Func.
func (mock *KubernetesInterfaceMock) CertificatesV1beta1() certificatesv1beta1.CertificatesV1beta1Interface {
	if mock.CertificatesV1beta1Func == nil {
		panic("KubernetesInterfaceMock.CertificatesV1beta1Func: method is nil but KubernetesInterface.CertificatesV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCertificatesV1beta1.Lock()
	mock.calls.CertificatesV1beta1 = append(mock.calls.CertificatesV1beta1, callInfo)
	mock.lockCertificatesV1beta1.Unlock()
	return mock.CertificatesV1beta1Func()
}

// CertificatesV1beta1Calls gets all the calls that were made to CertificatesV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.CertificatesV1beta1Calls())
func (mock *KubernetesInterfaceMock) CertificatesV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockCertificatesV1beta1.RLock()
	calls = mock.calls.CertificatesV1beta1
	mock.lockCertificatesV1beta1.RUnlock()
	return calls
}

// CoordinationV1 calls CoordinationV1Func.
func (mock *KubernetesInterfaceMock) CoordinationV1() coordinationv1.CoordinationV1Interface {
	if mock.CoordinationV1Func == nil {
		panic("KubernetesInterfaceMock.CoordinationV1Func: method is nil but KubernetesInterface.CoordinationV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCoordinationV1.Lock()
	mock.calls.CoordinationV1 = append(mock.calls.CoordinationV1, callInfo)
	mock.lockCoordinationV1.Unlock()
	return mock.CoordinationV1Func()
}

// CoordinationV1Calls gets all the calls that were made to CoordinationV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.CoordinationV1Calls())
func (mock *KubernetesInterfaceMock) CoordinationV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockCoordinationV1.RLock()
	calls = mock.calls.CoordinationV1
	mock.lockCoordinationV1.RUnlock()
	return calls
}

// CoordinationV1beta1 calls CoordinationV1beta1Func.
func (mock *KubernetesInterfaceMock) CoordinationV1beta1() coordinationv1beta1.CoordinationV1beta1Interface {
	if mock.CoordinationV1beta1Func == nil {
		panic("KubernetesInterfaceMock.CoordinationV1beta1Func: method is nil but KubernetesInterface.CoordinationV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCoordinationV1beta1.Lock()
	mock.calls.CoordinationV1beta1 = append(mock.calls.CoordinationV1beta1, callInfo)
	mock.lockCoordinationV1beta1.Unlock()
	return mock.CoordinationV1beta1Func()
}

// CoordinationV1beta1Calls gets all the calls that were made to CoordinationV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.CoordinationV1beta1Calls())
func (mock *KubernetesInterfaceMock) CoordinationV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockCoordinationV1beta1.RLock()
	calls = mock.calls.CoordinationV1beta1
	mock.lockCoordinationV1beta1.RUnlock()
	return calls
}

// CoreV1 calls CoreV1Func.
func (mock *KubernetesInterfaceMock) CoreV1() apiv1.CoreV1Interface {
	if mock.CoreV1Func == nil {
		panic("KubernetesInterfaceMock.CoreV1Func: method is nil but KubernetesInterface.CoreV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCoreV1.Lock()
	mock.calls.CoreV1 = append(mock.calls.CoreV1, callInfo)
	mock.lockCoreV1.Unlock()
	return mock.CoreV1Func()
}

// CoreV1Calls gets all the calls that were made to CoreV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.CoreV1Calls())
func (mock *KubernetesInterfaceMock) CoreV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockCoreV1.RLock()
	calls = mock.calls.CoreV1
	mock.lockCoreV1.RUnlock()
	return calls
}

// Discovery calls DiscoveryFunc.
func (mock *KubernetesInterfaceMock) Discovery() discovery.DiscoveryInterface {
	if mock.DiscoveryFunc == nil {
		panic("KubernetesInterfaceMock.DiscoveryFunc: method is nil but KubernetesInterface.Discovery was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDiscovery.Lock()
	mock.calls.Discovery = append(mock.calls.Discovery, callInfo)
	mock.lockDiscovery.Unlock()
	return mock.DiscoveryFunc()
}

// DiscoveryCalls gets all the calls that were made to Discovery.
// Check the length with:
//
//	len(mockedKubernetesInterface.DiscoveryCalls())
func (mock *KubernetesInterfaceMock) DiscoveryCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDiscovery.RLock()
	calls = mock.calls.Discovery
	mock.lockDiscovery.RUnlock()
	return calls
}

// DiscoveryV1 calls DiscoveryV1Func.
func (mock *KubernetesInterfaceMock) DiscoveryV1() discoveryv1.DiscoveryV1Interface {
	if mock.DiscoveryV1Func == nil {
		panic("KubernetesInterfaceMock.DiscoveryV1Func: method is nil but KubernetesInterface.DiscoveryV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDiscoveryV1.Lock()
	mock.calls.DiscoveryV1 = append(mock.calls.DiscoveryV1, callInfo)
	mock.lockDiscoveryV1.Unlock()
	return mock.DiscoveryV1Func()
}

// DiscoveryV1Calls gets all the calls that were made to DiscoveryV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.DiscoveryV1Calls())
func (mock *KubernetesInterfaceMock) DiscoveryV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockDiscoveryV1.RLock()
	calls = mock.calls.DiscoveryV1
	mock.lockDiscoveryV1.RUnlock()
	return calls
}

// DiscoveryV1beta1 calls DiscoveryV1beta1Func.
func (mock *KubernetesInterfaceMock) DiscoveryV1beta1() discoveryv1beta1.DiscoveryV1beta1Interface {
	if mock.DiscoveryV1beta1Func == nil {
		panic("KubernetesInterfaceMock.DiscoveryV1beta1Func: method is nil but KubernetesInterface.DiscoveryV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDiscoveryV1beta1.Lock()
	mock.calls.DiscoveryV1beta1 = append(mock.calls.DiscoveryV1beta1, callInfo)
	mock.lockDiscoveryV1beta1.Unlock()
	return mock.DiscoveryV1beta1Func()
}

// DiscoveryV1beta1Calls gets all the calls that were made to DiscoveryV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.DiscoveryV1beta1Calls())
func (mock *KubernetesInterfaceMock) DiscoveryV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockDiscoveryV1beta1.RLock()
	calls = mock.calls.DiscoveryV1beta1
	mock.lockDiscoveryV1beta1.RUnlock()
	return calls
}

// EventsV1 calls EventsV1Func.
func (mock *KubernetesInterfaceMock) EventsV1() eventsv1.EventsV1Interface {
	if mock.EventsV1Func == nil {
		panic("KubernetesInterfaceMock.EventsV1Func: method is nil but KubernetesInterface.EventsV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEventsV1.Lock()
	mock.calls.EventsV1 = append(mock.calls.EventsV1, callInfo)
	mock.lockEventsV1.Unlock()
	return mock.EventsV1Func()
}

// EventsV1Calls gets all the calls that were made to EventsV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.EventsV1Calls())
func (mock *KubernetesInterfaceMock) EventsV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockEventsV1.RLock()
	calls = mock.calls.EventsV1
	mock.lockEventsV1.RUnlock()
	return calls
}

// EventsV1beta1 calls EventsV1beta1Func.
func (mock *KubernetesInterfaceMock) EventsV1beta1() eventsv1beta1.EventsV1beta1Interface {
	if mock.EventsV1beta1Func == nil {
		panic("KubernetesInterfaceMock.EventsV1beta1Func: method is nil but KubernetesInterface.EventsV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEventsV1beta1.Lock()
	mock.calls.EventsV1beta1 = append(mock.calls.EventsV1beta1, callInfo)
	mock.lockEventsV1beta1.Unlock()
	return mock.EventsV1beta1Func()
}

// EventsV1beta1Calls gets all the calls that were made to EventsV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.EventsV1beta1Calls())
func (mock *KubernetesInterfaceMock) EventsV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockEventsV1beta1.RLock()
	calls = mock.calls.EventsV1beta1
	mock.lockEventsV1beta1.RUnlock()
	return calls
}

// ExtensionsV1beta1 calls ExtensionsV1beta1Func.
func (mock *KubernetesInterfaceMock) ExtensionsV1beta1() extensionsv1beta1.ExtensionsV1beta1Interface {
	if mock.ExtensionsV1beta1Func == nil {
		panic("KubernetesInterfaceMock.ExtensionsV1beta1Func: method is nil but KubernetesInterface.ExtensionsV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockExtensionsV1beta1.Lock()
	mock.calls.ExtensionsV1beta1 = append(mock.calls.ExtensionsV1beta1, callInfo)
	mock.lockExtensionsV1beta1.Unlock()
	return mock.ExtensionsV1beta1Func()
}

// ExtensionsV1beta1Calls gets all the calls that were made to ExtensionsV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.ExtensionsV1beta1Calls())
func (mock *KubernetesInterfaceMock) ExtensionsV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockExtensionsV1beta1.RLock()
	calls = mock.calls.ExtensionsV1beta1
	mock.lockExtensionsV1beta1.RUnlock()
	return calls
}

// FlowcontrolV1alpha1 calls FlowcontrolV1alpha1Func.
func (mock *KubernetesInterfaceMock) FlowcontrolV1alpha1() flowcontrolv1alpha1.FlowcontrolV1alpha1Interface {
	if mock.FlowcontrolV1alpha1Func == nil {
		panic("KubernetesInterfaceMock.FlowcontrolV1alpha1Func: method is nil but KubernetesInterface.FlowcontrolV1alpha1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFlowcontrolV1alpha1.Lock()
	mock.calls.FlowcontrolV1alpha1 = append(mock.calls.FlowcontrolV1alpha1, callInfo)
	mock.lockFlowcontrolV1alpha1.Unlock()
	return mock.FlowcontrolV1alpha1Func()
}

// FlowcontrolV1alpha1Calls gets all the calls that were made to FlowcontrolV1alpha1.
// Check the length with:
//
//	len(mockedKubernetesInterface.FlowcontrolV1alpha1Calls())
func (mock *KubernetesInterfaceMock) FlowcontrolV1alpha1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockFlowcontrolV1alpha1.RLock()
	calls = mock.calls.FlowcontrolV1alpha1
	mock.lockFlowcontrolV1alpha1.RUnlock()
	return calls
}

// FlowcontrolV1beta1 calls FlowcontrolV1beta1Func.
func (mock *KubernetesInterfaceMock) FlowcontrolV1beta1() flowcontrolv1beta1.FlowcontrolV1beta1Interface {
	if mock.FlowcontrolV1beta1Func == nil {
		panic("KubernetesInterfaceMock.FlowcontrolV1beta1Func: method is nil but KubernetesInterface.FlowcontrolV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFlowcontrolV1beta1.Lock()
	mock.calls.FlowcontrolV1beta1 = append(mock.calls.FlowcontrolV1beta1, callInfo)
	mock.lockFlowcontrolV1beta1.Unlock()
	return mock.FlowcontrolV1beta1Func()
}

// FlowcontrolV1beta1Calls gets all the calls that were made to FlowcontrolV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.FlowcontrolV1beta1Calls())
func (mock *KubernetesInterfaceMock) FlowcontrolV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockFlowcontrolV1beta1.RLock()
	calls = mock.calls.FlowcontrolV1beta1
	mock.lockFlowcontrolV1beta1.RUnlock()
	return calls
}

// FlowcontrolV1beta2 calls FlowcontrolV1beta2Func.
func (mock *KubernetesInterfaceMock) FlowcontrolV1beta2() flowcontrolv1beta2.FlowcontrolV1beta2Interface {
	if mock.FlowcontrolV1beta2Func == nil {
		panic("KubernetesInterfaceMock.FlowcontrolV1beta2Func: method is nil but KubernetesInterface.FlowcontrolV1beta2 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFlowcontrolV1beta2.Lock()
	mock.calls.FlowcontrolV1beta2 = append(mock.calls.FlowcontrolV1beta2, callInfo)
	mock.lockFlowcontrolV1beta2.Unlock()
	return mock.FlowcontrolV1beta2Func()
}

// FlowcontrolV1beta2Calls gets all the calls that were made to FlowcontrolV1beta2.
// Check the length with:
//
//	len(mockedKubernetesInterface.FlowcontrolV1beta2Calls())
func (mock *KubernetesInterfaceMock) FlowcontrolV1beta2Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockFlowcontrolV1beta2.RLock()
	calls = mock.calls.FlowcontrolV1beta2
	mock.lockFlowcontrolV1beta2.RUnlock()
	return calls
}

// FlowcontrolV1beta3 calls FlowcontrolV1beta3Func.
func (mock *KubernetesInterfaceMock) FlowcontrolV1beta3() v1beta3.FlowcontrolV1beta3Interface {
	if mock.FlowcontrolV1beta3Func == nil {
		panic("KubernetesInterfaceMock.FlowcontrolV1beta3Func: method is nil but KubernetesInterface.FlowcontrolV1beta3 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFlowcontrolV1beta3.Lock()
	mock.calls.FlowcontrolV1beta3 = append(mock.calls.FlowcontrolV1beta3, callInfo)
	mock.lockFlowcontrolV1beta3.Unlock()
	return mock.FlowcontrolV1beta3Func()
}

// FlowcontrolV1beta3Calls gets all the calls that were made to FlowcontrolV1beta3.
// Check the length with:
//
//	len(mockedKubernetesInterface.FlowcontrolV1beta3Calls())
func (mock *KubernetesInterfaceMock) FlowcontrolV1beta3Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockFlowcontrolV1beta3.RLock()
	calls = mock.calls.FlowcontrolV1beta3
	mock.lockFlowcontrolV1beta3.RUnlock()
	return calls
}

// InternalV1alpha1 calls InternalV1alpha1Func.
func (mock *KubernetesInterfaceMock) InternalV1alpha1() apiserverinternalv1alpha1.InternalV1alpha1Interface {
	if mock.InternalV1alpha1Func == nil {
		panic("KubernetesInterfaceMock.InternalV1alpha1Func: method is nil but KubernetesInterface.InternalV1alpha1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInternalV1alpha1.Lock()
	mock.calls.InternalV1alpha1 = append(mock.calls.InternalV1alpha1, callInfo)
	mock.lockInternalV1alpha1.Unlock()
	return mock.InternalV1alpha1Func()
}

// InternalV1alpha1Calls gets all the calls that were made to InternalV1alpha1.
// Check the length with:
//
//	len(mockedKubernetesInterface.InternalV1alpha1Calls())
func (mock *KubernetesInterfaceMock) InternalV1alpha1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockInternalV1alpha1.RLock()
	calls = mock.calls.InternalV1alpha1
	mock.lockInternalV1alpha1.RUnlock()
	return calls
}

// NetworkingV1 calls NetworkingV1Func.
func (mock *KubernetesInterfaceMock) NetworkingV1() netv1.NetworkingV1Interface {
	if mock.NetworkingV1Func == nil {
		panic("KubernetesInterfaceMock.NetworkingV1Func: method is nil but KubernetesInterface.NetworkingV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNetworkingV1.Lock()
	mock.calls.NetworkingV1 = append(mock.calls.NetworkingV1, callInfo)
	mock.lockNetworkingV1.Unlock()
	return mock.NetworkingV1Func()
}

// NetworkingV1Calls gets all the calls that were made to NetworkingV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.NetworkingV1Calls())
func (mock *KubernetesInterfaceMock) NetworkingV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockNetworkingV1.RLock()
	calls = mock.calls.NetworkingV1
	mock.lockNetworkingV1.RUnlock()
	return calls
}

// NetworkingV1alpha1 calls NetworkingV1alpha1Func.
func (mock *KubernetesInterfaceMock) NetworkingV1alpha1() networkingv1alpha1.NetworkingV1alpha1Interface {
	if mock.NetworkingV1alpha1Func == nil {
		panic("KubernetesInterfaceMock.NetworkingV1alpha1Func: method is nil but KubernetesInterface.NetworkingV1alpha1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNetworkingV1alpha1.Lock()
	mock.calls.NetworkingV1alpha1 = append(mock.calls.NetworkingV1alpha1, callInfo)
	mock.lockNetworkingV1alpha1.Unlock()
	return mock.NetworkingV1alpha1Func()
}

// NetworkingV1alpha1Calls gets all the calls that were made to NetworkingV1alpha1.
// Check the length with:
//
//	len(mockedKubernetesInterface.NetworkingV1alpha1Calls())
func (mock *KubernetesInterfaceMock) NetworkingV1alpha1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockNetworkingV1alpha1.RLock()
	calls = mock.calls.NetworkingV1alpha1
	mock.lockNetworkingV1alpha1.RUnlock()
	return calls
}

// NetworkingV1beta1 calls NetworkingV1beta1Func.
func (mock *KubernetesInterfaceMock) NetworkingV1beta1() networkingv1beta1.NetworkingV1beta1Interface {
	if mock.NetworkingV1beta1Func == nil {
		panic("KubernetesInterfaceMock.NetworkingV1beta1Func: method is nil but KubernetesInterface.NetworkingV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNetworkingV1beta1.Lock()
	mock.calls.NetworkingV1beta1 = append(mock.calls.NetworkingV1beta1, callInfo)
	mock.lockNetworkingV1beta1.Unlock()
	return mock.NetworkingV1beta1Func()
}

// NetworkingV1beta1Calls gets all the calls that were made to NetworkingV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.NetworkingV1beta1Calls())
func (mock *KubernetesInterfaceMock) NetworkingV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockNetworkingV1beta1.RLock()
	calls = mock.calls.NetworkingV1beta1
	mock.lockNetworkingV1beta1.RUnlock()
	return calls
}

// NodeV1 calls NodeV1Func.
func (mock *KubernetesInterfaceMock) NodeV1() nodev1.NodeV1Interface {
	if mock.NodeV1Func == nil {
		panic("KubernetesInterfaceMock.NodeV1Func: method is nil but KubernetesInterface.NodeV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNodeV1.Lock()
	mock.calls.NodeV1 = append(mock.calls.NodeV1, callInfo)
	mock.lockNodeV1.Unlock()
	return mock.NodeV1Func()
}

// NodeV1Calls gets all the calls that were made to NodeV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.NodeV1Calls())
func (mock *KubernetesInterfaceMock) NodeV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockNodeV1.RLock()
	calls = mock.calls.NodeV1
	mock.lockNodeV1.RUnlock()
	return calls
}

// NodeV1alpha1 calls NodeV1alpha1Func.
func (mock *KubernetesInterfaceMock) NodeV1alpha1() nodev1alpha1.NodeV1alpha1Interface {
	if mock.NodeV1alpha1Func == nil {
		panic("KubernetesInterfaceMock.NodeV1alpha1Func: method is nil but KubernetesInterface.NodeV1alpha1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNodeV1alpha1.Lock()
	mock.calls.NodeV1alpha1 = append(mock.calls.NodeV1alpha1, callInfo)
	mock.lockNodeV1alpha1.Unlock()
	return mock.NodeV1alpha1Func()
}

// NodeV1alpha1Calls gets all the calls that were made to NodeV1alpha1.
// Check the length with:
//
//	len(mockedKubernetesInterface.NodeV1alpha1Calls())
func (mock *KubernetesInterfaceMock) NodeV1alpha1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockNodeV1alpha1.RLock()
	calls = mock.calls.NodeV1alpha1
	mock.lockNodeV1alpha1.RUnlock()
	return calls
}

// NodeV1beta1 calls NodeV1beta1Func.
func (mock *KubernetesInterfaceMock) NodeV1beta1() nodev1beta1.NodeV1beta1Interface {
	if mock.NodeV1beta1Func == nil {
		panic("KubernetesInterfaceMock.NodeV1beta1Func: method is nil but KubernetesInterface.NodeV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNodeV1beta1.Lock()
	mock.calls.NodeV1beta1 = append(mock.calls.NodeV1beta1, callInfo)
	mock.lockNodeV1beta1.Unlock()
	return mock.NodeV1beta1Func()
}

// NodeV1beta1Calls gets all the calls that were made to NodeV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.NodeV1beta1Calls())
func (mock *KubernetesInterfaceMock) NodeV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockNodeV1beta1.RLock()
	calls = mock.calls.NodeV1beta1
	mock.lockNodeV1beta1.RUnlock()
	return calls
}

// PolicyV1 calls PolicyV1Func.
func (mock *KubernetesInterfaceMock) PolicyV1() policyv1.PolicyV1Interface {
	if mock.PolicyV1Func == nil {
		panic("KubernetesInterfaceMock.PolicyV1Func: method is nil but KubernetesInterface.PolicyV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPolicyV1.Lock()
	mock.calls.PolicyV1 = append(mock.calls.PolicyV1, callInfo)
	mock.lockPolicyV1.Unlock()
	return mock.PolicyV1Func()
}

// PolicyV1Calls gets all the calls that were made to PolicyV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.PolicyV1Calls())
func (mock *KubernetesInterfaceMock) PolicyV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockPolicyV1.RLock()
	calls = mock.calls.PolicyV1
	mock.lockPolicyV1.RUnlock()
	return calls
}

// PolicyV1beta1 calls PolicyV1beta1Func.
func (mock *KubernetesInterfaceMock) PolicyV1beta1() policyv1beta1.PolicyV1beta1Interface {
	if mock.PolicyV1beta1Func == nil {
		panic("KubernetesInterfaceMock.PolicyV1beta1Func: method is nil but KubernetesInterface.PolicyV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPolicyV1beta1.Lock()
	mock.calls.PolicyV1beta1 = append(mock.calls.PolicyV1beta1, callInfo)
	mock.lockPolicyV1beta1.Unlock()
	return mock.PolicyV1beta1Func()
}

// PolicyV1beta1Calls gets all the calls that were made to PolicyV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.PolicyV1beta1Calls())
func (mock *KubernetesInterfaceMock) PolicyV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockPolicyV1beta1.RLock()
	calls = mock.calls.PolicyV1beta1
	mock.lockPolicyV1beta1.RUnlock()
	return calls
}

// RbacV1 calls RbacV1Func.
func (mock *KubernetesInterfaceMock) RbacV1() rbacv1.RbacV1Interface {
	if mock.RbacV1Func == nil {
		panic("KubernetesInterfaceMock.RbacV1Func: method is nil but KubernetesInterface.RbacV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRbacV1.Lock()
	mock.calls.RbacV1 = append(mock.calls.RbacV1, callInfo)
	mock.lockRbacV1.Unlock()
	return mock.RbacV1Func()
}

// RbacV1Calls gets all the calls that were made to RbacV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.RbacV1Calls())
func (mock *KubernetesInterfaceMock) RbacV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockRbacV1.RLock()
	calls = mock.calls.RbacV1
	mock.lockRbacV1.RUnlock()
	return calls
}

// RbacV1alpha1 calls RbacV1alpha1Func.
func (mock *KubernetesInterfaceMock) RbacV1alpha1() rbacv1alpha1.RbacV1alpha1Interface {
	if mock.RbacV1alpha1Func == nil {
		panic("KubernetesInterfaceMock.RbacV1alpha1Func: method is nil but KubernetesInterface.RbacV1alpha1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRbacV1alpha1.Lock()
	mock.calls.RbacV1alpha1 = append(mock.calls.RbacV1alpha1, callInfo)
	mock.lockRbacV1alpha1.Unlock()
	return mock.RbacV1alpha1Func()
}

// RbacV1alpha1Calls gets all the calls that were made to RbacV1alpha1.
// Check the length with:
//
//	len(mockedKubernetesInterface.RbacV1alpha1Calls())
func (mock *KubernetesInterfaceMock) RbacV1alpha1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockRbacV1alpha1.RLock()
	calls = mock.calls.RbacV1alpha1
	mock.lockRbacV1alpha1.RUnlock()
	return calls
}

// RbacV1beta1 calls RbacV1beta1Func.
func (mock *KubernetesInterfaceMock) RbacV1beta1() rbacv1beta1.RbacV1beta1Interface {
	if mock.RbacV1beta1Func == nil {
		panic("KubernetesInterfaceMock.RbacV1beta1Func: method is nil but KubernetesInterface.RbacV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRbacV1beta1.Lock()
	mock.calls.RbacV1beta1 = append(mock.calls.RbacV1beta1, callInfo)
	mock.lockRbacV1beta1.Unlock()
	return mock.RbacV1beta1Func()
}

// RbacV1beta1Calls gets all the calls that were made to RbacV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.RbacV1beta1Calls())
func (mock *KubernetesInterfaceMock) RbacV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockRbacV1beta1.RLock()
	calls = mock.calls.RbacV1beta1
	mock.lockRbacV1beta1.RUnlock()
	return calls
}

// ResourceV1alpha2 calls ResourceV1alpha2Func.
func (mock *KubernetesInterfaceMock) ResourceV1alpha2() v1alpha2.ResourceV1alpha2Interface {
	if mock.ResourceV1alpha2Func == nil {
		panic("KubernetesInterfaceMock.ResourceV1alpha2Func: method is nil but KubernetesInterface.ResourceV1alpha2 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockResourceV1alpha2.Lock()
	mock.calls.ResourceV1alpha2 = append(mock.calls.ResourceV1alpha2, callInfo)
	mock.lockResourceV1alpha2.Unlock()
	return mock.ResourceV1alpha2Func()
}

// ResourceV1alpha2Calls gets all the calls that were made to ResourceV1alpha2.
// Check the length with:
//
//	len(mockedKubernetesInterface.ResourceV1alpha2Calls())
func (mock *KubernetesInterfaceMock) ResourceV1alpha2Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockResourceV1alpha2.RLock()
	calls = mock.calls.ResourceV1alpha2
	mock.lockResourceV1alpha2.RUnlock()
	return calls
}

// SchedulingV1 calls SchedulingV1Func.
func (mock *KubernetesInterfaceMock) SchedulingV1() schedulingv1.SchedulingV1Interface {
	if mock.SchedulingV1Func == nil {
		panic("KubernetesInterfaceMock.SchedulingV1Func: method is nil but KubernetesInterface.SchedulingV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSchedulingV1.Lock()
	mock.calls.SchedulingV1 = append(mock.calls.SchedulingV1, callInfo)
	mock.lockSchedulingV1.Unlock()
	return mock.SchedulingV1Func()
}

// SchedulingV1Calls gets all the calls that were made to SchedulingV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.SchedulingV1Calls())
func (mock *KubernetesInterfaceMock) SchedulingV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockSchedulingV1.RLock()
	calls = mock.calls.SchedulingV1
	mock.lockSchedulingV1.RUnlock()
	return calls
}

// SchedulingV1alpha1 calls SchedulingV1alpha1Func.
func (mock *KubernetesInterfaceMock) SchedulingV1alpha1() schedulingv1alpha1.SchedulingV1alpha1Interface {
	if mock.SchedulingV1alpha1Func == nil {
		panic("KubernetesInterfaceMock.SchedulingV1alpha1Func: method is nil but KubernetesInterface.SchedulingV1alpha1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSchedulingV1alpha1.Lock()
	mock.calls.SchedulingV1alpha1 = append(mock.calls.SchedulingV1alpha1, callInfo)
	mock.lockSchedulingV1alpha1.Unlock()
	return mock.SchedulingV1alpha1Func()
}

// SchedulingV1alpha1Calls gets all the calls that were made to SchedulingV1alpha1.
// Check the length with:
//
//	len(mockedKubernetesInterface.SchedulingV1alpha1Calls())
func (mock *KubernetesInterfaceMock) SchedulingV1alpha1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockSchedulingV1alpha1.RLock()
	calls = mock.calls.SchedulingV1alpha1
	mock.lockSchedulingV1alpha1.RUnlock()
	return calls
}

// SchedulingV1beta1 calls SchedulingV1beta1Func.
func (mock *KubernetesInterfaceMock) SchedulingV1beta1() schedulingv1beta1.SchedulingV1beta1Interface {
	if mock.SchedulingV1beta1Func == nil {
		panic("KubernetesInterfaceMock.SchedulingV1beta1Func: method is nil but KubernetesInterface.SchedulingV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSchedulingV1beta1.Lock()
	mock.calls.SchedulingV1beta1 = append(mock.calls.SchedulingV1beta1, callInfo)
	mock.lockSchedulingV1beta1.Unlock()
	return mock.SchedulingV1beta1Func()
}

// SchedulingV1beta1Calls gets all the calls that were made to SchedulingV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.SchedulingV1beta1Calls())
func (mock *KubernetesInterfaceMock) SchedulingV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockSchedulingV1beta1.RLock()
	calls = mock.calls.SchedulingV1beta1
	mock.lockSchedulingV1beta1.RUnlock()
	return calls
}

// StorageV1 calls StorageV1Func.
func (mock *KubernetesInterfaceMock) StorageV1() storagev1.StorageV1Interface {
	if mock.StorageV1Func == nil {
		panic("KubernetesInterfaceMock.StorageV1Func: method is nil but KubernetesInterface.StorageV1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStorageV1.Lock()
	mock.calls.StorageV1 = append(mock.calls.StorageV1, callInfo)
	mock.lockStorageV1.Unlock()
	return mock.StorageV1Func()
}

// StorageV1Calls gets all the calls that were made to StorageV1.
// Check the length with:
//
//	len(mockedKubernetesInterface.StorageV1Calls())
func (mock *KubernetesInterfaceMock) StorageV1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockStorageV1.RLock()
	calls = mock.calls.StorageV1
	mock.lockStorageV1.RUnlock()
	return calls
}

// StorageV1alpha1 calls StorageV1alpha1Func.
func (mock *KubernetesInterfaceMock) StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface {
	if mock.StorageV1alpha1Func == nil {
		panic("KubernetesInterfaceMock.StorageV1alpha1Func: method is nil but KubernetesInterface.StorageV1alpha1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStorageV1alpha1.Lock()
	mock.calls.StorageV1alpha1 = append(mock.calls.StorageV1alpha1, callInfo)
	mock.lockStorageV1alpha1.Unlock()
	return mock.StorageV1alpha1Func()
}

// StorageV1alpha1Calls gets all the calls that were made to StorageV1alpha1.
// Check the length with:
//
//	len(mockedKubernetesInterface.StorageV1alpha1Calls())
func (mock *KubernetesInterfaceMock) StorageV1alpha1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockStorageV1alpha1.RLock()
	calls = mock.calls.StorageV1alpha1
	mock.lockStorageV1alpha1.RUnlock()
	return calls
}

// StorageV1beta1 calls StorageV1beta1Func.
func (mock *KubernetesInterfaceMock) StorageV1beta1() v1beta1.StorageV1beta1Interface {
	if mock.StorageV1beta1Func == nil {
		panic("KubernetesInterfaceMock.StorageV1beta1Func: method is nil but KubernetesInterface.StorageV1beta1 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStorageV1beta1.Lock()
	mock.calls.StorageV1beta1 = append(mock.calls.StorageV1beta1, callInfo)
	mock.lockStorageV1beta1.Unlock()
	return mock.StorageV1beta1Func()
}

// StorageV1beta1Calls gets all the calls that were made to StorageV1beta1.
// Check the length with:
//
//	len(mockedKubernetesInterface.StorageV1beta1Calls())
func (mock *KubernetesInterfaceMock) StorageV1beta1Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockStorageV1beta1.RLock()
	calls = mock.calls.StorageV1beta1
	mock.lockStorageV1beta1.RUnlock()
	return calls
}

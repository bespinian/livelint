// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package livelint_test

import (
	"context"
	"github.com/bespinian/livelint/internal/livelint"
	apiappsv1 "k8s.io/api/apps/v1"
	"k8s.io/api/autoscaling/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	applyconfigurationsappsv1 "k8s.io/client-go/applyconfigurations/apps/v1"
	autoscalingv1 "k8s.io/client-go/applyconfigurations/autoscaling/v1"
	"sync"
)

// Ensure, that DeploymentInterfaceMock does implement livelint.DeploymentInterface.
// If this is not the case, regenerate this file with moq.
var _ livelint.DeploymentInterface = &DeploymentInterfaceMock{}

// DeploymentInterfaceMock is a mock implementation of livelint.DeploymentInterface.
//
//	func TestSomethingThatUsesDeploymentInterface(t *testing.T) {
//
//		// make and configure a mocked livelint.DeploymentInterface
//		mockedDeploymentInterface := &DeploymentInterfaceMock{
//			ApplyFunc: func(ctx context.Context, deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration, opts metav1.ApplyOptions) (*apiappsv1.Deployment, error) {
//				panic("mock out the Apply method")
//			},
//			ApplyScaleFunc: func(ctx context.Context, deploymentName string, scale *autoscalingv1.ScaleApplyConfiguration, opts metav1.ApplyOptions) (*v1.Scale, error) {
//				panic("mock out the ApplyScale method")
//			},
//			ApplyStatusFunc: func(ctx context.Context, deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration, opts metav1.ApplyOptions) (*apiappsv1.Deployment, error) {
//				panic("mock out the ApplyStatus method")
//			},
//			CreateFunc: func(ctx context.Context, deployment *apiappsv1.Deployment, opts metav1.CreateOptions) (*apiappsv1.Deployment, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, name string, opts metav1.DeleteOptions) error {
//				panic("mock out the Delete method")
//			},
//			DeleteCollectionFunc: func(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
//				panic("mock out the DeleteCollection method")
//			},
//			GetFunc: func(ctx context.Context, name string, opts metav1.GetOptions) (*apiappsv1.Deployment, error) {
//				panic("mock out the Get method")
//			},
//			GetScaleFunc: func(ctx context.Context, deploymentName string, options metav1.GetOptions) (*v1.Scale, error) {
//				panic("mock out the GetScale method")
//			},
//			ListFunc: func(ctx context.Context, opts metav1.ListOptions) (*apiappsv1.DeploymentList, error) {
//				panic("mock out the List method")
//			},
//			PatchFunc: func(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*apiappsv1.Deployment, error) {
//				panic("mock out the Patch method")
//			},
//			UpdateFunc: func(ctx context.Context, deployment *apiappsv1.Deployment, opts metav1.UpdateOptions) (*apiappsv1.Deployment, error) {
//				panic("mock out the Update method")
//			},
//			UpdateScaleFunc: func(ctx context.Context, deploymentName string, scale *v1.Scale, opts metav1.UpdateOptions) (*v1.Scale, error) {
//				panic("mock out the UpdateScale method")
//			},
//			UpdateStatusFunc: func(ctx context.Context, deployment *apiappsv1.Deployment, opts metav1.UpdateOptions) (*apiappsv1.Deployment, error) {
//				panic("mock out the UpdateStatus method")
//			},
//			WatchFunc: func(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
//				panic("mock out the Watch method")
//			},
//		}
//
//		// use mockedDeploymentInterface in code that requires livelint.DeploymentInterface
//		// and then make assertions.
//
//	}
type DeploymentInterfaceMock struct {
	// ApplyFunc mocks the Apply method.
	ApplyFunc func(ctx context.Context, deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration, opts metav1.ApplyOptions) (*apiappsv1.Deployment, error)

	// ApplyScaleFunc mocks the ApplyScale method.
	ApplyScaleFunc func(ctx context.Context, deploymentName string, scale *autoscalingv1.ScaleApplyConfiguration, opts metav1.ApplyOptions) (*v1.Scale, error)

	// ApplyStatusFunc mocks the ApplyStatus method.
	ApplyStatusFunc func(ctx context.Context, deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration, opts metav1.ApplyOptions) (*apiappsv1.Deployment, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, deployment *apiappsv1.Deployment, opts metav1.CreateOptions) (*apiappsv1.Deployment, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, name string, opts metav1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, name string, opts metav1.GetOptions) (*apiappsv1.Deployment, error)

	// GetScaleFunc mocks the GetScale method.
	GetScaleFunc func(ctx context.Context, deploymentName string, options metav1.GetOptions) (*v1.Scale, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, opts metav1.ListOptions) (*apiappsv1.DeploymentList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*apiappsv1.Deployment, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, deployment *apiappsv1.Deployment, opts metav1.UpdateOptions) (*apiappsv1.Deployment, error)

	// UpdateScaleFunc mocks the UpdateScale method.
	UpdateScaleFunc func(ctx context.Context, deploymentName string, scale *v1.Scale, opts metav1.UpdateOptions) (*v1.Scale, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(ctx context.Context, deployment *apiappsv1.Deployment, opts metav1.UpdateOptions) (*apiappsv1.Deployment, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Apply holds details about calls to the Apply method.
		Apply []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Deployment is the deployment argument value.
			Deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration
			// Opts is the opts argument value.
			Opts metav1.ApplyOptions
		}
		// ApplyScale holds details about calls to the ApplyScale method.
		ApplyScale []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeploymentName is the deploymentName argument value.
			DeploymentName string
			// Scale is the scale argument value.
			Scale *autoscalingv1.ScaleApplyConfiguration
			// Opts is the opts argument value.
			Opts metav1.ApplyOptions
		}
		// ApplyStatus holds details about calls to the ApplyStatus method.
		ApplyStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Deployment is the deployment argument value.
			Deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration
			// Opts is the opts argument value.
			Opts metav1.ApplyOptions
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Deployment is the deployment argument value.
			Deployment *apiappsv1.Deployment
			// Opts is the opts argument value.
			Opts metav1.CreateOptions
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts metav1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts metav1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts metav1.ListOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts metav1.GetOptions
		}
		// GetScale holds details about calls to the GetScale method.
		GetScale []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeploymentName is the deploymentName argument value.
			DeploymentName string
			// Options is the options argument value.
			Options metav1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Opts is the opts argument value.
			Opts metav1.PatchOptions
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Deployment is the deployment argument value.
			Deployment *apiappsv1.Deployment
			// Opts is the opts argument value.
			Opts metav1.UpdateOptions
		}
		// UpdateScale holds details about calls to the UpdateScale method.
		UpdateScale []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeploymentName is the deploymentName argument value.
			DeploymentName string
			// Scale is the scale argument value.
			Scale *v1.Scale
			// Opts is the opts argument value.
			Opts metav1.UpdateOptions
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Deployment is the deployment argument value.
			Deployment *apiappsv1.Deployment
			// Opts is the opts argument value.
			Opts metav1.UpdateOptions
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
	}
	lockApply            sync.RWMutex
	lockApplyScale       sync.RWMutex
	lockApplyStatus      sync.RWMutex
	lockCreate           sync.RWMutex
	lockDelete           sync.RWMutex
	lockDeleteCollection sync.RWMutex
	lockGet              sync.RWMutex
	lockGetScale         sync.RWMutex
	lockList             sync.RWMutex
	lockPatch            sync.RWMutex
	lockUpdate           sync.RWMutex
	lockUpdateScale      sync.RWMutex
	lockUpdateStatus     sync.RWMutex
	lockWatch            sync.RWMutex
}

// Apply calls ApplyFunc.
func (mock *DeploymentInterfaceMock) Apply(ctx context.Context, deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration, opts metav1.ApplyOptions) (*apiappsv1.Deployment, error) {
	if mock.ApplyFunc == nil {
		panic("DeploymentInterfaceMock.ApplyFunc: method is nil but DeploymentInterface.Apply was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration
		Opts       metav1.ApplyOptions
	}{
		Ctx:        ctx,
		Deployment: deployment,
		Opts:       opts,
	}
	mock.lockApply.Lock()
	mock.calls.Apply = append(mock.calls.Apply, callInfo)
	mock.lockApply.Unlock()
	return mock.ApplyFunc(ctx, deployment, opts)
}

// ApplyCalls gets all the calls that were made to Apply.
// Check the length with:
//
//	len(mockedDeploymentInterface.ApplyCalls())
func (mock *DeploymentInterfaceMock) ApplyCalls() []struct {
	Ctx        context.Context
	Deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration
	Opts       metav1.ApplyOptions
} {
	var calls []struct {
		Ctx        context.Context
		Deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration
		Opts       metav1.ApplyOptions
	}
	mock.lockApply.RLock()
	calls = mock.calls.Apply
	mock.lockApply.RUnlock()
	return calls
}

// ApplyScale calls ApplyScaleFunc.
func (mock *DeploymentInterfaceMock) ApplyScale(ctx context.Context, deploymentName string, scale *autoscalingv1.ScaleApplyConfiguration, opts metav1.ApplyOptions) (*v1.Scale, error) {
	if mock.ApplyScaleFunc == nil {
		panic("DeploymentInterfaceMock.ApplyScaleFunc: method is nil but DeploymentInterface.ApplyScale was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		DeploymentName string
		Scale          *autoscalingv1.ScaleApplyConfiguration
		Opts           metav1.ApplyOptions
	}{
		Ctx:            ctx,
		DeploymentName: deploymentName,
		Scale:          scale,
		Opts:           opts,
	}
	mock.lockApplyScale.Lock()
	mock.calls.ApplyScale = append(mock.calls.ApplyScale, callInfo)
	mock.lockApplyScale.Unlock()
	return mock.ApplyScaleFunc(ctx, deploymentName, scale, opts)
}

// ApplyScaleCalls gets all the calls that were made to ApplyScale.
// Check the length with:
//
//	len(mockedDeploymentInterface.ApplyScaleCalls())
func (mock *DeploymentInterfaceMock) ApplyScaleCalls() []struct {
	Ctx            context.Context
	DeploymentName string
	Scale          *autoscalingv1.ScaleApplyConfiguration
	Opts           metav1.ApplyOptions
} {
	var calls []struct {
		Ctx            context.Context
		DeploymentName string
		Scale          *autoscalingv1.ScaleApplyConfiguration
		Opts           metav1.ApplyOptions
	}
	mock.lockApplyScale.RLock()
	calls = mock.calls.ApplyScale
	mock.lockApplyScale.RUnlock()
	return calls
}

// ApplyStatus calls ApplyStatusFunc.
func (mock *DeploymentInterfaceMock) ApplyStatus(ctx context.Context, deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration, opts metav1.ApplyOptions) (*apiappsv1.Deployment, error) {
	if mock.ApplyStatusFunc == nil {
		panic("DeploymentInterfaceMock.ApplyStatusFunc: method is nil but DeploymentInterface.ApplyStatus was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration
		Opts       metav1.ApplyOptions
	}{
		Ctx:        ctx,
		Deployment: deployment,
		Opts:       opts,
	}
	mock.lockApplyStatus.Lock()
	mock.calls.ApplyStatus = append(mock.calls.ApplyStatus, callInfo)
	mock.lockApplyStatus.Unlock()
	return mock.ApplyStatusFunc(ctx, deployment, opts)
}

// ApplyStatusCalls gets all the calls that were made to ApplyStatus.
// Check the length with:
//
//	len(mockedDeploymentInterface.ApplyStatusCalls())
func (mock *DeploymentInterfaceMock) ApplyStatusCalls() []struct {
	Ctx        context.Context
	Deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration
	Opts       metav1.ApplyOptions
} {
	var calls []struct {
		Ctx        context.Context
		Deployment *applyconfigurationsappsv1.DeploymentApplyConfiguration
		Opts       metav1.ApplyOptions
	}
	mock.lockApplyStatus.RLock()
	calls = mock.calls.ApplyStatus
	mock.lockApplyStatus.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *DeploymentInterfaceMock) Create(ctx context.Context, deployment *apiappsv1.Deployment, opts metav1.CreateOptions) (*apiappsv1.Deployment, error) {
	if mock.CreateFunc == nil {
		panic("DeploymentInterfaceMock.CreateFunc: method is nil but DeploymentInterface.Create was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Deployment *apiappsv1.Deployment
		Opts       metav1.CreateOptions
	}{
		Ctx:        ctx,
		Deployment: deployment,
		Opts:       opts,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, deployment, opts)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedDeploymentInterface.CreateCalls())
func (mock *DeploymentInterfaceMock) CreateCalls() []struct {
	Ctx        context.Context
	Deployment *apiappsv1.Deployment
	Opts       metav1.CreateOptions
} {
	var calls []struct {
		Ctx        context.Context
		Deployment *apiappsv1.Deployment
		Opts       metav1.CreateOptions
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *DeploymentInterfaceMock) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("DeploymentInterfaceMock.DeleteFunc: method is nil but DeploymentInterface.Delete was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Opts metav1.DeleteOptions
	}{
		Ctx:  ctx,
		Name: name,
		Opts: opts,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, name, opts)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedDeploymentInterface.DeleteCalls())
func (mock *DeploymentInterfaceMock) DeleteCalls() []struct {
	Ctx  context.Context
	Name string
	Opts metav1.DeleteOptions
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Opts metav1.DeleteOptions
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *DeploymentInterfaceMock) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("DeploymentInterfaceMock.DeleteCollectionFunc: method is nil but DeploymentInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Opts     metav1.DeleteOptions
		ListOpts metav1.ListOptions
	}{
		Ctx:      ctx,
		Opts:     opts,
		ListOpts: listOpts,
	}
	mock.lockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	mock.lockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(ctx, opts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//
//	len(mockedDeploymentInterface.DeleteCollectionCalls())
func (mock *DeploymentInterfaceMock) DeleteCollectionCalls() []struct {
	Ctx      context.Context
	Opts     metav1.DeleteOptions
	ListOpts metav1.ListOptions
} {
	var calls []struct {
		Ctx      context.Context
		Opts     metav1.DeleteOptions
		ListOpts metav1.ListOptions
	}
	mock.lockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	mock.lockDeleteCollection.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *DeploymentInterfaceMock) Get(ctx context.Context, name string, opts metav1.GetOptions) (*apiappsv1.Deployment, error) {
	if mock.GetFunc == nil {
		panic("DeploymentInterfaceMock.GetFunc: method is nil but DeploymentInterface.Get was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Opts metav1.GetOptions
	}{
		Ctx:  ctx,
		Name: name,
		Opts: opts,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedDeploymentInterface.GetCalls())
func (mock *DeploymentInterfaceMock) GetCalls() []struct {
	Ctx  context.Context
	Name string
	Opts metav1.GetOptions
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Opts metav1.GetOptions
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetScale calls GetScaleFunc.
func (mock *DeploymentInterfaceMock) GetScale(ctx context.Context, deploymentName string, options metav1.GetOptions) (*v1.Scale, error) {
	if mock.GetScaleFunc == nil {
		panic("DeploymentInterfaceMock.GetScaleFunc: method is nil but DeploymentInterface.GetScale was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		DeploymentName string
		Options        metav1.GetOptions
	}{
		Ctx:            ctx,
		DeploymentName: deploymentName,
		Options:        options,
	}
	mock.lockGetScale.Lock()
	mock.calls.GetScale = append(mock.calls.GetScale, callInfo)
	mock.lockGetScale.Unlock()
	return mock.GetScaleFunc(ctx, deploymentName, options)
}

// GetScaleCalls gets all the calls that were made to GetScale.
// Check the length with:
//
//	len(mockedDeploymentInterface.GetScaleCalls())
func (mock *DeploymentInterfaceMock) GetScaleCalls() []struct {
	Ctx            context.Context
	DeploymentName string
	Options        metav1.GetOptions
} {
	var calls []struct {
		Ctx            context.Context
		DeploymentName string
		Options        metav1.GetOptions
	}
	mock.lockGetScale.RLock()
	calls = mock.calls.GetScale
	mock.lockGetScale.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DeploymentInterfaceMock) List(ctx context.Context, opts metav1.ListOptions) (*apiappsv1.DeploymentList, error) {
	if mock.ListFunc == nil {
		panic("DeploymentInterfaceMock.ListFunc: method is nil but DeploymentInterface.List was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts metav1.ListOptions
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedDeploymentInterface.ListCalls())
func (mock *DeploymentInterfaceMock) ListCalls() []struct {
	Ctx  context.Context
	Opts metav1.ListOptions
} {
	var calls []struct {
		Ctx  context.Context
		Opts metav1.ListOptions
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *DeploymentInterfaceMock) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*apiappsv1.Deployment, error) {
	if mock.PatchFunc == nil {
		panic("DeploymentInterfaceMock.PatchFunc: method is nil but DeploymentInterface.Patch was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Name         string
		Pt           types.PatchType
		Data         []byte
		Opts         metav1.PatchOptions
		Subresources []string
	}{
		Ctx:          ctx,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Opts:         opts,
		Subresources: subresources,
	}
	mock.lockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	mock.lockPatch.Unlock()
	return mock.PatchFunc(ctx, name, pt, data, opts, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//
//	len(mockedDeploymentInterface.PatchCalls())
func (mock *DeploymentInterfaceMock) PatchCalls() []struct {
	Ctx          context.Context
	Name         string
	Pt           types.PatchType
	Data         []byte
	Opts         metav1.PatchOptions
	Subresources []string
} {
	var calls []struct {
		Ctx          context.Context
		Name         string
		Pt           types.PatchType
		Data         []byte
		Opts         metav1.PatchOptions
		Subresources []string
	}
	mock.lockPatch.RLock()
	calls = mock.calls.Patch
	mock.lockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *DeploymentInterfaceMock) Update(ctx context.Context, deployment *apiappsv1.Deployment, opts metav1.UpdateOptions) (*apiappsv1.Deployment, error) {
	if mock.UpdateFunc == nil {
		panic("DeploymentInterfaceMock.UpdateFunc: method is nil but DeploymentInterface.Update was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Deployment *apiappsv1.Deployment
		Opts       metav1.UpdateOptions
	}{
		Ctx:        ctx,
		Deployment: deployment,
		Opts:       opts,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, deployment, opts)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedDeploymentInterface.UpdateCalls())
func (mock *DeploymentInterfaceMock) UpdateCalls() []struct {
	Ctx        context.Context
	Deployment *apiappsv1.Deployment
	Opts       metav1.UpdateOptions
} {
	var calls []struct {
		Ctx        context.Context
		Deployment *apiappsv1.Deployment
		Opts       metav1.UpdateOptions
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// UpdateScale calls UpdateScaleFunc.
func (mock *DeploymentInterfaceMock) UpdateScale(ctx context.Context, deploymentName string, scale *v1.Scale, opts metav1.UpdateOptions) (*v1.Scale, error) {
	if mock.UpdateScaleFunc == nil {
		panic("DeploymentInterfaceMock.UpdateScaleFunc: method is nil but DeploymentInterface.UpdateScale was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		DeploymentName string
		Scale          *v1.Scale
		Opts           metav1.UpdateOptions
	}{
		Ctx:            ctx,
		DeploymentName: deploymentName,
		Scale:          scale,
		Opts:           opts,
	}
	mock.lockUpdateScale.Lock()
	mock.calls.UpdateScale = append(mock.calls.UpdateScale, callInfo)
	mock.lockUpdateScale.Unlock()
	return mock.UpdateScaleFunc(ctx, deploymentName, scale, opts)
}

// UpdateScaleCalls gets all the calls that were made to UpdateScale.
// Check the length with:
//
//	len(mockedDeploymentInterface.UpdateScaleCalls())
func (mock *DeploymentInterfaceMock) UpdateScaleCalls() []struct {
	Ctx            context.Context
	DeploymentName string
	Scale          *v1.Scale
	Opts           metav1.UpdateOptions
} {
	var calls []struct {
		Ctx            context.Context
		DeploymentName string
		Scale          *v1.Scale
		Opts           metav1.UpdateOptions
	}
	mock.lockUpdateScale.RLock()
	calls = mock.calls.UpdateScale
	mock.lockUpdateScale.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *DeploymentInterfaceMock) UpdateStatus(ctx context.Context, deployment *apiappsv1.Deployment, opts metav1.UpdateOptions) (*apiappsv1.Deployment, error) {
	if mock.UpdateStatusFunc == nil {
		panic("DeploymentInterfaceMock.UpdateStatusFunc: method is nil but DeploymentInterface.UpdateStatus was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Deployment *apiappsv1.Deployment
		Opts       metav1.UpdateOptions
	}{
		Ctx:        ctx,
		Deployment: deployment,
		Opts:       opts,
	}
	mock.lockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	mock.lockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(ctx, deployment, opts)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//
//	len(mockedDeploymentInterface.UpdateStatusCalls())
func (mock *DeploymentInterfaceMock) UpdateStatusCalls() []struct {
	Ctx        context.Context
	Deployment *apiappsv1.Deployment
	Opts       metav1.UpdateOptions
} {
	var calls []struct {
		Ctx        context.Context
		Deployment *apiappsv1.Deployment
		Opts       metav1.UpdateOptions
	}
	mock.lockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	mock.lockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *DeploymentInterfaceMock) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("DeploymentInterfaceMock.WatchFunc: method is nil but DeploymentInterface.Watch was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts metav1.ListOptions
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	mock.lockWatch.Unlock()
	return mock.WatchFunc(ctx, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//
//	len(mockedDeploymentInterface.WatchCalls())
func (mock *DeploymentInterfaceMock) WatchCalls() []struct {
	Ctx  context.Context
	Opts metav1.ListOptions
} {
	var calls []struct {
		Ctx  context.Context
		Opts metav1.ListOptions
	}
	mock.lockWatch.RLock()
	calls = mock.calls.Watch
	mock.lockWatch.RUnlock()
	return calls
}
